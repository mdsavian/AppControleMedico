{"version":3,"file":"perfect-scrollbar.directive.d.ts","sources":["C:/temp/ControleMedico/AppControleMedico/node_modules/ngx-perfect-scrollbar/dist/lib/perfect-scrollbar.directive.d.ts"],"sourcesContent":["import { OnInit, DoCheck, OnChanges, OnDestroy, EventEmitter, NgZone, ElementRef, SimpleChanges, KeyValueDiffers } from '@angular/core';\nimport { Geometry, Position } from './perfect-scrollbar.interfaces';\nimport { PerfectScrollbarConfigInterface } from './perfect-scrollbar.interfaces';\nexport declare class PerfectScrollbarDirective implements OnInit, OnDestroy, DoCheck, OnChanges {\n    private zone;\n    elementRef: ElementRef;\n    private differs;\n    private defaults;\n    private ro;\n    private instance;\n    private timeout;\n    private configDiff;\n    disabled: boolean;\n    config: PerfectScrollbarConfigInterface;\n    PS_SCROLL_Y: EventEmitter<any>;\n    PS_SCROLL_X: EventEmitter<any>;\n    PS_SCROLL_UP: EventEmitter<any>;\n    PS_SCROLL_DOWN: EventEmitter<any>;\n    PS_SCROLL_LEFT: EventEmitter<any>;\n    PS_SCROLL_RIGHT: EventEmitter<any>;\n    PS_Y_REACH_END: EventEmitter<any>;\n    PS_Y_REACH_START: EventEmitter<any>;\n    PS_X_REACH_END: EventEmitter<any>;\n    PS_X_REACH_START: EventEmitter<any>;\n    private emit(event);\n    psScrollY(event: any): void;\n    psScrollX(event: any): void;\n    psScrollUp(event: any): void;\n    pscrollDown(event: any): void;\n    psScrollLeft(event: any): void;\n    psScrollRight(event: any): any;\n    psReachEndY(event: any): any;\n    psReachStartY(event: any): any;\n    psReachEndX(event: any): any;\n    psReachStartX(event: any): any;\n    constructor(zone: NgZone, elementRef: ElementRef, differs: KeyValueDiffers, defaults: PerfectScrollbarConfigInterface);\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n    ngDoCheck(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    ps(): any;\n    update(): void;\n    geometry(prefix?: string): Geometry;\n    position(absolute?: boolean): Position;\n    scrollable(direction?: string): boolean;\n    scrollTo(x: number, y?: number, speed?: number): void;\n    scrollToX(x: number, speed?: number): void;\n    scrollToY(y: number, speed?: number): void;\n    scrollToTop(offset?: number, speed?: number): void;\n    scrollToLeft(offset?: number, speed?: number): void;\n    scrollToRight(offset?: number, speed?: number): void;\n    scrollToBottom(offset?: number, speed?: number): void;\n    private animateScrolling(target, value, speed?);\n}\n"],"names":[],"mappings":"AAAA;;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkDA;"}