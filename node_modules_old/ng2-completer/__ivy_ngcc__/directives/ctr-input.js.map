{"version":3,"sources":["C:/temp/ControleMedico/AppControleMedico/node_modules/ng2-completer/directives/ctr-input.js"],"names":[],"mappings":"AAAA;;;;;;;;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAgOM,AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAuBA","file":"ctr-input.js","sourcesContent":["import { Directive, ElementRef, EventEmitter, Host, HostListener, Input, Output } from \"@angular/core\";\nimport { NgModel } from \"@angular/forms\";\nimport { Observable } from \"rxjs/Observable\";\nimport { CtrCompleter } from \"./ctr-completer\";\nimport { isNil } from \"../globals\";\n// keyboard events\nvar KEY_DW = 40;\nvar KEY_RT = 39;\nvar KEY_UP = 38;\nvar KEY_LF = 37;\nvar KEY_ES = 27;\nvar KEY_EN = 13;\nvar KEY_TAB = 9;\nvar KEY_BK = 8;\nvar KEY_SH = 16;\nvar KEY_CL = 20;\nvar KEY_F1 = 112;\nvar KEY_F12 = 123;\nvar CtrInput = (function () {\n    function CtrInput(completer, ngModel, el) {\n        var _this = this;\n        this.completer = completer;\n        this.ngModel = ngModel;\n        this.el = el;\n        this.clearSelected = false;\n        this.clearUnselected = false;\n        this.overrideSuggested = false;\n        this.fillHighlighted = true;\n        this.openOnFocus = false;\n        this.openOnClick = false;\n        this.selectOnClick = false;\n        this.selectOnFocus = false;\n        this.ngModelChange = new EventEmitter();\n        this._searchStr = \"\";\n        this._displayStr = \"\";\n        this.blurTimer = null;\n        this.completer.selected.subscribe(function (item) {\n            if (!item) {\n                return;\n            }\n            if (_this.clearSelected) {\n                _this.searchStr = \"\";\n            }\n            else {\n                _this.searchStr = item.title;\n            }\n            _this.ngModelChange.emit(_this.searchStr);\n        });\n        this.completer.highlighted.subscribe(function (item) {\n            if (_this.fillHighlighted) {\n                if (item) {\n                    _this._displayStr = item.title;\n                    _this.ngModelChange.emit(item.title);\n                }\n                else {\n                    _this._displayStr = _this.searchStr;\n                    _this.ngModelChange.emit(_this.searchStr);\n                }\n            }\n        });\n        this.completer.dataSourceChange.subscribe(function () {\n            _this.searchStr = \"\";\n            _this.ngModelChange.emit(_this.searchStr);\n        });\n        if (this.ngModel.valueChanges) {\n            this.ngModel.valueChanges.subscribe(function (value) {\n                if (!isNil(value) && _this._displayStr !== value) {\n                    if (_this.searchStr !== value) {\n                        _this.completer.search(value);\n                    }\n                    _this.searchStr = value;\n                }\n            });\n        }\n    }\n    CtrInput.prototype.keyupHandler = function (event) {\n        if (event.keyCode === KEY_LF || event.keyCode === KEY_RT || event.keyCode === KEY_TAB) {\n            // do nothing\n            return;\n        }\n        if (event.keyCode === KEY_UP || event.keyCode === KEY_EN) {\n            event.preventDefault();\n        }\n        else if (event.keyCode === KEY_DW) {\n            event.preventDefault();\n            this.completer.search(this.searchStr);\n        }\n        else if (event.keyCode === KEY_ES) {\n            if (this.completer.isOpen) {\n                this.restoreSearchValue();\n                this.completer.clear();\n                event.stopPropagation();\n                event.preventDefault();\n            }\n        }\n    };\n    CtrInput.prototype.pasteHandler = function (event) {\n        this.completer.open();\n    };\n    CtrInput.prototype.keydownHandler = function (event) {\n        var keyCode = event.keyCode || event.which;\n        if (keyCode === KEY_EN) {\n            if (this.completer.hasHighlighted()) {\n                event.preventDefault();\n            }\n            this.handleSelection();\n        }\n        else if (keyCode === KEY_DW) {\n            event.preventDefault();\n            this.completer.open();\n            this.completer.nextRow();\n        }\n        else if (keyCode === KEY_UP) {\n            event.preventDefault();\n            this.completer.prevRow();\n        }\n        else if (keyCode === KEY_TAB) {\n            this.handleSelection();\n        }\n        else if (keyCode === KEY_BK) {\n            this.completer.open();\n        }\n        else if (keyCode === KEY_ES) {\n            // This is very specific to IE10/11 #272\n            // without this, IE clears the input text\n            event.preventDefault();\n            if (this.completer.isOpen) {\n                event.stopPropagation();\n            }\n        }\n        else {\n            if (keyCode !== 0 && keyCode !== KEY_SH && keyCode !== KEY_CL &&\n                (keyCode <= KEY_F1 || keyCode >= KEY_F12) &&\n                !event.ctrlKey && !event.metaKey && !event.altKey) {\n                this.completer.open();\n            }\n        }\n    };\n    CtrInput.prototype.onBlur = function (event) {\n        var _this = this;\n        // Check if we need to cancel Blur for IE\n        if (this.completer.isCancelBlur()) {\n            setTimeout(function () {\n                // get the focus back\n                _this.el.nativeElement.focus();\n            }, 0);\n            return;\n        }\n        if (this.completer.isOpen) {\n            this.blurTimer = Observable.timer(200).subscribe(function () { return _this.doBlur(); });\n        }\n    };\n    CtrInput.prototype.onfocus = function () {\n        if (this.blurTimer) {\n            this.blurTimer.unsubscribe();\n            this.blurTimer = null;\n        }\n        if (this.selectOnFocus) {\n            this.el.nativeElement.select();\n        }\n        if (this.openOnFocus) {\n            this.completer.open();\n        }\n    };\n    CtrInput.prototype.onClick = function (event) {\n        if (this.selectOnClick) {\n            this.el.nativeElement.select();\n        }\n        if (this.openOnClick) {\n            if (this.completer.isOpen) {\n                this.completer.clear();\n            }\n            else {\n                this.completer.open();\n            }\n        }\n    };\n    Object.defineProperty(CtrInput.prototype, \"searchStr\", {\n        get: function () {\n            return this._searchStr;\n        },\n        set: function (term) {\n            this._searchStr = term;\n            this._displayStr = term;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CtrInput.prototype.handleSelection = function () {\n        if (this.completer.hasHighlighted()) {\n            this._searchStr = \"\";\n            this.completer.selectCurrent();\n        }\n        else if (this.overrideSuggested) {\n            this.completer.onSelected({ title: this.searchStr, originalObject: null });\n        }\n        else {\n            if (this.clearUnselected) {\n                this.searchStr = \"\";\n                this.ngModelChange.emit(this.searchStr);\n            }\n            this.completer.clear();\n        }\n    };\n    CtrInput.prototype.restoreSearchValue = function () {\n        if (this.fillHighlighted) {\n            if (this._displayStr != this.searchStr) {\n                this._displayStr = this.searchStr;\n                this.ngModelChange.emit(this.searchStr);\n            }\n        }\n    };\n    CtrInput.prototype.doBlur = function () {\n        if (this.blurTimer) {\n            this.blurTimer.unsubscribe();\n            this.blurTimer = null;\n        }\n        if (this.overrideSuggested) {\n            this.completer.onSelected({ title: this.searchStr, originalObject: null });\n        }\n        else {\n            if (this.clearUnselected && !this.completer.hasSelected) {\n                this.searchStr = \"\";\n                this.ngModelChange.emit(this.searchStr);\n            }\n            else {\n                this.restoreSearchValue();\n            }\n        }\n        this.completer.clear();\n    };\n    CtrInput.decorators = [\n        { type: Directive, args: [{\n                    selector: \"[ctrInput]\",\n                },] },\n    ];\n    /** @nocollapse */\n    CtrInput.ctorParameters = function () { return [\n        { type: CtrCompleter, decorators: [{ type: Host },] },\n        { type: NgModel, },\n        { type: ElementRef, },\n    ]; };\n    CtrInput.propDecorators = {\n        'clearSelected': [{ type: Input, args: [\"clearSelected\",] },],\n        'clearUnselected': [{ type: Input, args: [\"clearUnselected\",] },],\n        'overrideSuggested': [{ type: Input, args: [\"overrideSuggested\",] },],\n        'fillHighlighted': [{ type: Input, args: [\"fillHighlighted\",] },],\n        'openOnFocus': [{ type: Input, args: [\"openOnFocus\",] },],\n        'openOnClick': [{ type: Input, args: [\"openOnClick\",] },],\n        'selectOnClick': [{ type: Input, args: [\"selectOnClick\",] },],\n        'selectOnFocus': [{ type: Input, args: [\"selectOnFocus\",] },],\n        'ngModelChange': [{ type: Output },],\n        'keyupHandler': [{ type: HostListener, args: [\"keyup\", [\"$event\"],] },],\n        'pasteHandler': [{ type: HostListener, args: [\"paste\", [\"$event\"],] },],\n        'keydownHandler': [{ type: HostListener, args: [\"keydown\", [\"$event\"],] },],\n        'onBlur': [{ type: HostListener, args: [\"blur\", [\"$event\"],] },],\n        'onfocus': [{ type: HostListener, args: [\"focus\", [],] },],\n        'onClick': [{ type: HostListener, args: [\"click\", [\"$event\"],] },],\n    };\n    return CtrInput;\n}());\nexport { CtrInput };\n"]}