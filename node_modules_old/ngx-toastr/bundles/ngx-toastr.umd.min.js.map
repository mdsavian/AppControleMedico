{"version":3,"sources":["ng://ngx-toastr/toastr/toast.directive.ts","ng://ngx-toastr/toastr/toastr-config.ts","ng://ngx-toastr/portal/portal.ts","ng://ngx-toastr/portal/dom-portal-host.ts","ng://ngx-toastr/overlay/overlay-ref.ts","ng://ngx-toastr/overlay/overlay-container.ts","ng://ngx-toastr/overlay/overlay.ts","ng://ngx-toastr/toastr/toast-injector.ts","ng://ngx-toastr/toastr/toast-token.ts","ng://ngx-toastr/toastr/toastr.service.ts","ng://ngx-toastr/toastr/toast.component.ts","ng://ngx-toastr/toastr/default-config.ts","ng://ngx-toastr/toastr/toastr.module.ts","ng://ngx-toastr/toastr/toast-noanimation.component.ts"],"names":["ToastContainerDirective","el","this","prototype","getContainerElement","nativeElement","Directive","args","selector","exportAs","ElementRef","NgModule","declarations","exports","ToastPackage","toastId","config","message","title","toastType","toastRef","_this","Subject","afterClosed","subscribe","_onAction","complete","_onTap","triggerTap","next","tapToDismiss","onTap","asObservable","triggerAction","action","onAction","ComponentPortal","component","injector","attach","host","newestOnTop","_attachedHost","detach","undefined","Object","defineProperty","setAttachedHost","BasePortalHost","portal","_attachedPortal","attachComponentPortal","_disposeFn","setDisposeFn","fn","DomPortalHost","_super","_hostDomElement","_componentFactoryResolver","_appRef","call","tslib_1.__extends","componentRef","componentFactory","resolveComponentFactory","create","attachView","hostView","detachView","destroy","insertBefore","_getComponentRootNode","firstChild","appendChild","rootNodes","OverlayRef","_portalHost","OverlayContainer","_containerElement","_createContainer","container","document","createElement","classList","add","body","Overlay","_overlayContainer","positionClass","overlayContainer","_createOverlayRef","getPaneElement","_paneElements","_createPaneElement","pane","id","_createPortalHost","Injectable","ComponentFactoryResolver","ApplicationRef","OVERLAY_PROVIDERS","ToastRef","_overlayRef","manualClose","_manualClose","manualClosed","close","_afterClosed","_activate","isInactive","isStopped","activate","afterActivate","ToastInjector","_toastPackage","_parentInjector","get","token","notFoundValue","TOAST_CONFIG","InjectionToken","ToastrService","overlay","_injector","sanitizer","ngZone","defaultConfig","defaults","toastrConfig","tslib_1","__assign","iconClasses","show","override","type","_preBuildNotification","applyConfig","success","error","info","warning","clear","_a","tslib_1.__values","toasts","_b","done","toast","value","remove","found","_findToast","activeToast","splice","index","currentlyActive","maxOpened","length","p","isDuplicate","i","onActivateTick","run","_buildNotification","toastComponent","Error","preventDuplicates","previousToastMessage","keepInactive","autoDismiss","overlayRef","sanitizedMessage","enableHtml","sanitize","SecurityContext","HTML","toastPackage","toastInjector","componentInstance","_component","ins","onShown","onHidden","setTimeout","push","Inject","Injector","DomSanitizer","NgZone","Toast","toastrService","params","easeTime","easing","options","toastClasses","toastClass","sub","activateToast","sub1","ngOnDestroy","unsubscribe","clearInterval","intervalId","clearTimeout","timeout","state","disableTimeOut","timeOut","outsideTimeout","hideTime","Date","getTime","progressBar","outsideInterval","updateProgress","width","now","remaining","progressAnimation","tapToast","stickAround","delayedHideToast","extendedTimeOut","func","runOutsideAngular","runInsideAngular","setInterval","Component","template","animations","trigger","style","display","opacity","transition","animate","preserveWhitespaces","HostBinding","HostListener","DefaultGlobalConfig","ToastrModule","parentModule","forRoot","ngModule","providers","provide","useValue","imports","CommonModule","entryComponents","decorators","Optional","SkipSelf","ToastNoAnimation","appRef","tick"],"mappings":"6hBAAA,IAAAA,EAAA,WAWE,SAAAA,EAAoBC,GAAAC,KAAAD,GAAAA,SACpBD,EAAAG,UAAAC,oBAAA,WACE,OAAOF,KAAKD,GAAGI,mCAPlBC,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,mBACVC,SAAU,8DANVC,EAAAA,gBAFF,yDAiBCC,EAAAA,SAAQJ,KAAA,CAAC,CACRK,aAAc,CAACZ,GACfa,QAAS,CAACb,YCkHZc,EAAA,WAIE,SAAAA,EACSC,EACAC,EACAC,EACAC,EACAC,EACAC,GANT,IAAAC,EAAAnB,KACSA,KAAAa,QAAAA,EACAb,KAAAc,OAAAA,EACAd,KAAAe,QAAAA,EACAf,KAAAgB,MAAAA,EACAhB,KAAAiB,UAAAA,EACAjB,KAAAkB,SAAAA,cATQ,IAAIE,EAAAA,uBACD,IAAIA,EAAAA,QAUtBpB,KAAKkB,SAASG,cAAcC,UAAU,WACpCH,EAAKI,UAAUC,WACfL,EAAKM,OAAOD,oBAKhBZ,EAAAX,UAAAyB,WAAA,WACE1B,KAAKyB,OAAOE,OACR3B,KAAKc,OAAOc,cACd5B,KAAKyB,OAAOD,YAIhBZ,EAAAX,UAAA4B,MAAA,WACE,OAAO7B,KAAKyB,OAAOK,gBAIrBlB,EAAAX,UAAA8B,cAAA,SAAcC,GACZhC,KAAKuB,UAAUI,KAAKK,IAGtBpB,EAAAX,UAAAgC,SAAA,WACE,OAAOjC,KAAKuB,UAAUO,kBApC1B,GCvHAI,EAAA,WAeE,SAAAA,EAAYC,EAA6BC,GACvCpC,KAAKmC,UAAYA,EACjBnC,KAAKoC,SAAWA,SAIlBF,EAAAjC,UAAAoC,OAAA,SAAOC,EAAsBC,GAE3B,OADAvC,KAAKwC,cAAgBF,GACTD,OAAOrC,KAAMuC,IAI3BL,EAAAjC,UAAAwC,OAAA,WACE,IAAMH,EAAOtC,KAAKwC,cAClB,GAAIF,EAEF,OADAtC,KAAKwC,cAAgBE,UACdJ,EAAKG,UAKhBE,OAAAC,eAAIV,EAAAjC,UAAA,aAAU,KAAd,WACE,OAA6B,MAAtBD,KAAKwC,+CAOdN,EAAAjC,UAAA4C,gBAAA,SAAgBP,GACdtC,KAAKwC,cAAgBF,KA7CzB,GAqDAQ,EAAA,gCAOEA,EAAA7C,UAAAoC,OAAA,SAAOU,EAA8BR,GAEnC,OADAvC,KAAKgD,gBAAkBD,EAChB/C,KAAKiD,sBAAsBF,EAAQR,IAK5CO,EAAA7C,UAAAwC,OAAA,WACMzC,KAAKgD,iBACPhD,KAAKgD,gBAAgBH,kBAGvB7C,KAAKgD,gBAAkBN,UACnB1C,KAAKkD,aACPlD,KAAKkD,aACLlD,KAAKkD,WAAaR,YAItBI,EAAA7C,UAAAkD,aAAA,SAAaC,GACXpD,KAAKkD,WAAaE,KA3BtB,GCrDAC,EAAA,SAAAC,GACE,SAAAD,EACUE,EACAC,EACAC,GAHV,IAAAtC,EAKEmC,EAAAI,KAAA1D,OAAOA,YAJCmB,EAAAoC,gBAAAA,EACApC,EAAAqC,0BAAAA,EACArC,EAAAsC,QAAAA,WAJuBE,EAAAA,UAAAA,EAAAA,GAajCN,EAAApD,UAAAgD,sBAAA,SACEF,EACAR,GAFF,IAOMqB,EAPNzC,EAAAnB,KAIQ6D,EAAmB7D,KAAKwD,0BAA0BM,wBACtDf,EAAOZ,WAmCT,OA1BAyB,EAAeC,EAAiBE,OAAOhB,EAAOX,UAM9CpC,KAAKyD,QAAQO,WAAWJ,EAAaK,UAErCjE,KAAKmD,aAAa,WAChBhC,EAAKsC,QAAQS,WAAWN,EAAaK,UACrCL,EAAaO,YAKX5B,EACFvC,KAAKuD,gBAAgBa,aACnBpE,KAAKqE,sBAAsBT,GAC3B5D,KAAKuD,gBAAgBe,YAGvBtE,KAAKuD,gBAAgBgB,YACnBvE,KAAKqE,sBAAsBT,IAIxBA,GAIDP,EAAApD,UAAAoE,+BAAsBT,GAC5B,OAAQA,EAA6C,SAAEY,UAAU,MA1DrE,CAAmC1B,GCPnC2B,EAAA,WACE,SAAAA,EAAoBC,GAAA1E,KAAA0E,YAAAA,SAEpBD,EAAAxE,UAAAoC,OAAA,SACEU,EACAR,GAEA,YAFA,IAAAA,IAAAA,GAAA,GAEOvC,KAAK0E,YAAYrC,OAAOU,EAAQR,IAOzCkC,EAAAxE,UAAAwC,OAAA,WACE,OAAOzC,KAAK0E,YAAYjC,YAf5B,GCHAkC,EAAA,gCASEA,EAAA1E,UAAAC,oBAAA,WAEE,OADKF,KAAK4E,mBAAqB5E,KAAK6E,mBAC7B7E,KAAK4E,mBAOND,EAAA1E,UAAA4E,4BACN,IAAMC,EAAYC,SAASC,cAAc,OACzCF,EAAUG,UAAUC,IAAI,qBACxBH,SAASI,KAAKZ,YAAYO,GAC1B9E,KAAK4E,kBAAoBE,KAtB7B,gBCeI,SAAAM,EAAoBC,EACA7B,EACAC,GAFAzD,KAAAqF,kBAAAA,EACArF,KAAAwD,0BAAAA,EACAxD,KAAAyD,QAAAA,qBAH4B,UAQlD2B,EAAAnF,UAAA8D,OAAA,SAAOuB,EAAwBC,GAE7B,OAAOvF,KAAKwF,kBAAkBxF,KAAKyF,eAAeH,EAAeC,KAGnEH,EAAAnF,UAAAwF,eAAA,SAAeH,EAA4BC,GAIzC,YAJa,IAAAD,IAAAA,EAAA,IACRtF,KAAK0F,cAAcJ,KACtBtF,KAAK0F,cAAcJ,GAAiBtF,KAAK2F,mBAAmBL,EAAeC,IAEtEvF,KAAK0F,cAAcJ,IAOpBF,EAAAnF,UAAA0F,4BAAmBL,EAAuBC,GAChD,IAAMK,EAAOb,SAASC,cAAc,OAUpC,OATAY,EAAKC,GAAK,kBACVD,EAAKX,UAAUC,IAAII,GACnBM,EAAKX,UAAUC,IAAI,mBAEdK,EAGHA,EAAiBrF,sBAAsBqE,YAAYqB,GAFnD5F,KAAKqF,kBAAkBnF,sBAAsBqE,YAAYqB,GAIpDA,GAQDR,EAAAnF,UAAA6F,2BAAkBF,GACxB,OAAO,IAAIvC,EAAcuC,EAAM5F,KAAKwD,0BAA2BxD,KAAKyD,UAO9D2B,EAAAnF,UAAAuF,2BAAkBI,GACxB,OAAO,IAAInB,EAAWzE,KAAK8F,kBAAkBF,yBAtD/CG,EAAAA,sDAXOpB,SALgBqB,EAAAA,gCAAhBC,EAAAA,uBA4EIC,EAAoB,CAC/Bd,EACAT,GCrEFwB,EAAA,WAWE,SAAAA,EAAoBC,GAAApG,KAAAoG,YAAAA,oBANG,IAAIhF,EAAAA,uBAEP,IAAIA,EAAAA,0BAED,IAAIA,EAAAA,eAI3B+E,EAAAlG,UAAAoG,YAAA,WACErG,KAAKsG,aAAa3E,OAClB3B,KAAKsG,aAAa9E,YAGpB2E,EAAAlG,UAAAsG,aAAA,WACE,OAAOvG,KAAKsG,aAAaxE,gBAM3BqE,EAAAlG,UAAAuG,MAAA,WACExG,KAAKoG,YAAY3D,SACjBzC,KAAKyG,aAAa9E,OAClB3B,KAAKyG,aAAajF,WAClBxB,KAAKsG,aAAa9E,WAClBxB,KAAK0G,UAAUlF,YAIjB2E,EAAAlG,UAAAoB,YAAA,WACE,OAAOrB,KAAKyG,aAAa3E,gBAG3BqE,EAAAlG,UAAA0G,WAAA,WACE,OAAO3G,KAAK0G,UAAUE,WAGxBT,EAAAlG,UAAA4G,SAAA,WACE7G,KAAK0G,UAAU/E,OACf3B,KAAK0G,UAAUlF,YAIjB2E,EAAAlG,UAAA6G,cAAA,WACE,OAAO9G,KAAK0G,UAAU5E,kBAjD1B,GAuDAiF,EAAA,WACE,SAAAA,EACUC,EACAC,GADAjH,KAAAgH,cAAAA,EACAhH,KAAAiH,gBAAAA,SAEVF,EAAA9G,UAAAiH,IAAA,SAAIC,EAAYC,GACd,OAAID,IAAUvG,GAAgBZ,KAAKgH,cAC1BhH,KAAKgH,cAEPhH,KAAKiH,gBAAgBC,IAAIC,EAAOC,MAT3C,GCvDaC,EAAe,IAAIC,EAAAA,eAA2B,4BC2CzD,SAAAC,EACwBJ,EACdK,EACAC,EACAC,EACAC,GAHA3H,KAAAwH,QAAAA,EACAxH,KAAAyH,UAAAA,EACAzH,KAAA0H,UAAAA,EACA1H,KAAA2H,OAAAA,uBAXQ,cACW,cAGb,EASd,IAAMC,EAAgB,IAAIT,EAAMU,SAChC7H,KAAK8H,aAAYC,EAAAC,SAAA,GAAQJ,EAAkBT,EAAMrG,QACjDd,KAAK8H,aAAaG,YAAWF,EAAAC,SAAA,GACxBJ,EAAcK,YACdd,EAAMrG,OAAOmH,oBAIpBV,EAAAtH,UAAAiI,KAAA,SAAKnH,EAAkBC,EAAgBmH,EAA0CC,GAC/E,YADqC,IAAAD,IAAAA,EAAA,SAA0C,IAAAC,IAAAA,EAAA,IACxEpI,KAAKqI,sBAAsBD,EAAMrH,EAASC,EAAOhB,KAAKsI,YAAYH,KAG3EZ,EAAAtH,UAAAsI,QAAA,SAAQxH,EAAkBC,EAAgBmH,QAAA,IAAAA,IAAAA,EAAA,IACxC,IAAMC,EAAOpI,KAAK8H,aAAaG,YAAYM,SAAW,GACtD,OAAOvI,KAAKqI,sBAAsBD,EAAMrH,EAASC,EAAOhB,KAAKsI,YAAYH,KAG3EZ,EAAAtH,UAAAuI,MAAA,SAAMzH,EAAkBC,EAAgBmH,QAAA,IAAAA,IAAAA,EAAA,IACtC,IAAMC,EAAOpI,KAAK8H,aAAaG,YAAYO,OAAS,GACpD,OAAOxI,KAAKqI,sBAAsBD,EAAMrH,EAASC,EAAOhB,KAAKsI,YAAYH,KAG3EZ,EAAAtH,UAAAwI,KAAA,SAAK1H,EAAkBC,EAAgBmH,QAAA,IAAAA,IAAAA,EAAA,IACrC,IAAMC,EAAOpI,KAAK8H,aAAaG,YAAYQ,MAAQ,GACnD,OAAOzI,KAAKqI,sBAAsBD,EAAMrH,EAASC,EAAOhB,KAAKsI,YAAYH,KAG3EZ,EAAAtH,UAAAyI,QAAA,SAAQ3H,EAAkBC,EAAgBmH,QAAA,IAAAA,IAAAA,EAAA,IACxC,IAAMC,EAAOpI,KAAK8H,aAAaG,YAAYS,SAAW,GACtD,OAAO1I,KAAKqI,sBAAsBD,EAAMrH,EAASC,EAAOhB,KAAKsI,YAAYH,KAK3EZ,EAAAtH,UAAA0I,MAAA,SAAM9H,OAEJ,IAAoB,IAAA+H,EAAAC,EAAAA,SAAA7I,KAAK8I,QAAMC,EAAAH,EAAAjH,QAAAoH,EAAAC,KAAAD,EAAAH,EAAAjH,OAAA,CAA1B,IAAMsH,EAAKF,EAAAG,MACd,GAAIrI,IAAY6B,WACd,GAAIuG,EAAMpI,UAAYA,EAEpB,YADAoI,EAAM/H,SAASmF,mBAIjB4C,EAAM/H,SAASmF,4HAOrBkB,EAAAtH,UAAAkJ,OAAA,SAAOtI,GACL,IAAMuI,EAAQpJ,KAAKqJ,WAAWxI,GAC9B,IAAKuI,EACH,OAAO,EAKT,GAHAA,EAAME,YAAYpI,SAASsF,QAC3BxG,KAAK8I,OAAOS,OAAOH,EAAMI,MAAO,GAChCxJ,KAAKyJ,gBAAkBzJ,KAAKyJ,gBAAkB,GACzCzJ,KAAK8H,aAAa4B,YAAc1J,KAAK8I,OAAOa,OAC/C,OAAO,EAET,GAAI3J,KAAKyJ,gBAAkBzJ,KAAK8H,aAAa4B,WAAa1J,KAAK8I,OAAO9I,KAAKyJ,iBAAkB,CAC3F,IAAMG,EAAI5J,KAAK8I,OAAO9I,KAAKyJ,iBAAiBvI,SACvC0I,EAAEjD,eACL3G,KAAKyJ,gBAAkBzJ,KAAKyJ,gBAAkB,EAC9CG,EAAE/C,YAGN,OAAO,GAMTU,EAAAtH,UAAA4J,YAAA,SAAY9I,GACV,IAAK,IAAI+I,EAAI,EAAGA,EAAI9J,KAAK8I,OAAOa,OAAQG,IACtC,GAAI9J,KAAK8I,OAAOgB,GAAG/I,UAAYA,EAC7B,OAAO,EAGX,OAAO,GAIDwG,EAAAtH,UAAAqI,qBAAYH,GAClB,YADkB,IAAAA,IAAAA,EAAA,IAClBJ,EAAAC,SAAA,GAAYhI,KAAK8H,aAAiBK,IAM5BZ,EAAAtH,UAAAoJ,oBAAWxI,GACjB,IAAK,IAAIiJ,EAAI,EAAGA,EAAI9J,KAAK8I,OAAOa,OAAQG,IACtC,GAAI9J,KAAK8I,OAAOgB,GAAGjJ,UAAYA,EAC7B,MAAO,CAAE2I,MAAOM,EAAGR,YAAatJ,KAAK8I,OAAOgB,IAGhD,OAAO,MAMDvC,EAAAtH,UAAAoI,+BACNpH,EACAF,EACAC,EACAF,cAEA,OAAIA,EAAOiJ,eACF/J,KAAK2H,OAAOqC,IAAI,WAAM,OAAA7I,EAAK8I,mBAAmBhJ,EAAWF,EAASC,EAAOF,KAE3Ed,KAAKiK,mBAAmBhJ,EAAWF,EAASC,EAAOF,IAOpDyG,EAAAtH,UAAAgK,4BACNhJ,EACAF,EACAC,EACAF,cAEA,IAAKA,EAAOoJ,eACV,MAAM,IAAIC,MAAM,2BAGlB,GAAIpJ,GAAWf,KAAK8H,aAAasC,mBAAqBpK,KAAK6J,YAAY9I,GACrE,OAAO,KAETf,KAAKqK,qBAAuBtJ,EAC5B,IAAIuJ,GAAe,EACftK,KAAK8H,aAAa4B,WAAa1J,KAAKyJ,iBAAmBzJ,KAAK8H,aAAa4B,YAC3EY,GAAe,EACXtK,KAAK8H,aAAayC,aACpBvK,KAAK2I,MAAM3I,KAAK8I,OAAO9I,KAAK8I,OAAOa,OAAS,GAAG9I,UAGnD,IAAM2J,EAAaxK,KAAKwH,QAAQzD,OAAOjD,EAAOwE,cAAetF,KAAKuF,kBAClEvF,KAAKwJ,MAAQxJ,KAAKwJ,MAAQ,EAC1B,IAAIiB,EAAyD1J,EACzDA,GAAWD,EAAO4J,aACpBD,EAAmBzK,KAAK0H,UAAUiD,SAASC,EAAAA,gBAAgBC,KAAM9J,IAEnE,IAAMG,EAAW,IAAIiF,EAASqE,GACxBM,EAAe,IAAIlK,EACvBZ,KAAKwJ,MACL1I,EACA2J,EACAzJ,EACAC,EACAC,GAEI6J,EAAgB,IAAIhE,EAAc+D,EAAc9K,KAAKyH,WACrDtF,EAAY,IAAID,EAAgBpB,EAAOoJ,eAAgBa,GACvDhI,EAASyH,EAAWnI,OAAOF,EAAWnC,KAAK8H,aAAavF,aAC9DrB,EAAS8J,kBAAoB,EAAcC,WAC3C,IAAMC,EAAwB,CAC5BrK,QAASb,KAAKwJ,MACdzI,QAASA,GAAW,GACpBG,SAAQA,EACRiK,QAASjK,EAAS4F,gBAClBsE,SAAUlK,EAASG,cACnBQ,MAAOiJ,EAAajJ,QACpBI,SAAU6I,EAAa7I,WACvBc,OAAMA,GAWR,OARKuH,GACHe,WAAW,WACTH,EAAIhK,SAAS2F,WACb1F,EAAKsI,gBAAkBtI,EAAKsI,gBAAkB,IAIlDzJ,KAAK8I,OAAOwC,KAAKJ,GACVA,uBAlMVnF,EAAAA,kFAUIwF,EAAAA,OAAMlL,KAAA,CAACgH,YAzCHjC,SARPoG,EAAAA,gBAIOC,EAAAA,oBAHPC,EAAAA,4BC4EA,SAAAC,EACYC,EACHd,EACGnD,GAHZ,IAAAxG,EAAAnB,KACYA,KAAA4L,cAAAA,EACH5L,KAAA8K,aAAAA,EACG9K,KAAA2H,OAAAA,cApBH,oBAE4B,cAEH,CAChCuB,MAAO,WACP2C,OAAQ,CACNC,SAAU9L,KAAK8K,aAAahK,OAAOgL,SACnCC,OAAQ,YAcV/L,KAAKe,QAAU+J,EAAa/J,QAC5Bf,KAAKgB,MAAQ8J,EAAa9J,MAC1BhB,KAAKgM,QAAUlB,EAAahK,OAC5Bd,KAAKiM,aAAkBnB,EAAa7J,UAAS,IAAI6J,EAAahK,OAAOoL,WACrElM,KAAKmM,IAAMrB,EAAa5J,SAAS4F,gBAAgBxF,UAAU,WACzDH,EAAKiL,kBAEPpM,KAAKqM,KAAOvB,EAAa5J,SAASqF,eAAejF,UAAU,WACzDH,EAAKgI,kBAGTwC,EAAA1L,UAAAqM,YAAA,WACEtM,KAAKmM,IAAII,cACTvM,KAAKqM,KAAKE,cACVC,cAAcxM,KAAKyM,YACnBC,aAAa1M,KAAK2M,UAKpBhB,EAAA1L,UAAAmM,cAAA,WAAA,IAAAjL,EAAAnB,KACEA,KAAK4M,MAAK7E,EAAAC,SAAA,GAAQhI,KAAK4M,MAAK,CAAE1D,MAAO,YAChClJ,KAAKgM,QAAQa,gBAAkB7M,KAAKgM,QAAQc,UAC/C9M,KAAK+M,eAAe,WAAM,OAAA5L,EAAKgI,UAAUnJ,KAAKgM,QAAQc,SACtD9M,KAAKgN,UAAW,IAAIC,MAAOC,UAAYlN,KAAKgM,QAAQc,QAChD9M,KAAKgM,QAAQmB,aACfnN,KAAKoN,gBAAgB,WAAM,OAAAjM,EAAKkM,kBAAkB,MAOxD1B,EAAA1L,UAAAoN,eAAA,WACE,GAAmB,IAAfrN,KAAKsN,OAA8B,MAAftN,KAAKsN,OAAkBtN,KAAKgM,QAAQc,QAA5D,CAGA,IAAMS,GAAM,IAAIN,MAAOC,UACjBM,EAAYxN,KAAKgN,SAAWO,EAClCvN,KAAKsN,MAASE,EAAYxN,KAAKgM,QAAQc,QAAW,IACX,eAAnC9M,KAAKgM,QAAQyB,oBACfzN,KAAKsN,MAAQ,IAAMtN,KAAKsN,OAEtBtN,KAAKsN,OAAS,IAChBtN,KAAKsN,MAAQ,GAEG,KAAdtN,KAAKsN,QACPtN,KAAKsN,MAAQ,OAOjB3B,EAAA1L,UAAAkJ,OAAA,WAAA,IAAAhI,EAAAnB,KAC2B,YAArBA,KAAK4M,MAAM1D,QAGfwD,aAAa1M,KAAK2M,SAClB3M,KAAK4M,MAAK7E,EAAAC,SAAA,GAAOhI,KAAK4M,MAAK,CAAE1D,MAAO,YACpClJ,KAAK+M,eAAe,WAChB,OAAA5L,EAAKyK,cAAczC,OAAOhI,EAAK2J,aAAajK,WAC3Cb,KAAK8K,aAAahK,OAAOgL,YAIhCH,EAAA1L,UAAAyN,oBAC2B,YAArB1N,KAAK4M,MAAM1D,QAGflJ,KAAK8K,aAAapJ,aACd1B,KAAKgM,QAAQpK,cACf5B,KAAKmJ,WAITwC,EAAA1L,UAAA0N,uBAC2B,YAArB3N,KAAK4M,MAAM1D,QAGfwD,aAAa1M,KAAK2M,SAClB3M,KAAKgM,QAAQc,QAAU,EACvB9M,KAAKgN,SAAW,EAGhBR,cAAcxM,KAAKyM,YACnBzM,KAAKsN,MAAQ,IAGf3B,EAAA1L,UAAA2N,uCACM5N,KAAKgM,QAAQa,gBACqB,IAAjC7M,KAAKgM,QAAQ6B,iBACQ,YAArB7N,KAAK4M,MAAM1D,QAGhBlJ,KAAK+M,eAAe,WAAM,OAAA5L,EAAKgI,UAAUnJ,KAAKgM,QAAQ6B,iBACtD7N,KAAKgM,QAAQc,QAAU9M,KAAKgM,QAAQ6B,gBACpC7N,KAAKgN,UAAW,IAAIC,MAAOC,WAAalN,KAAKgM,QAAQc,SAAW,GAChE9M,KAAKsN,OAAS,EACVtN,KAAKgM,QAAQmB,aACfnN,KAAKoN,gBAAgB,WAAM,OAAAjM,EAAKkM,kBAAkB,MAItD1B,EAAA1L,UAAA8M,eAAA,SAAee,EAAgBnB,GAA/B,IAAAxL,EAAAnB,KACMA,KAAK2H,OACP3H,KAAK2H,OAAOoG,kBAAkB,WAC5B,OAAA5M,EAAKwL,QAAUtB,WAAW,WAAM,OAAAlK,EAAK6M,iBAAiBF,IAAOnB,KAG/D3M,KAAK2M,QAAUtB,WAAW,WAAM,OAAAyC,KAAQnB,IAI5ChB,EAAA1L,UAAAmN,gBAAA,SAAgBU,EAAgBnB,GAAhC,IAAAxL,EAAAnB,KACMA,KAAK2H,OACP3H,KAAK2H,OAAOoG,kBAAkB,WAC5B,OAAA5M,EAAKsL,WAAawB,YAAY,WAAM,OAAA9M,EAAK6M,iBAAiBF,IAAOnB,KAGnE3M,KAAKyM,WAAawB,YAAY,WAAM,OAAAH,KAAQnB,IAIxChB,EAAA1L,UAAA+N,0BAAiBF,GACnB9N,KAAK2H,OACP3H,KAAK2H,OAAOqC,IAAI,WAAM,OAAA8D,MAEtBA,yBAjMLI,EAAAA,UAAS7N,KAAA,CAAC,CACTC,SAAU,oBACV6N,SAAU,otBAkBVC,WAAY,CACVC,EAAAA,QAAQ,WAAY,CAClBzB,EAAAA,MAAM,WAAY0B,EAAAA,MAAM,CACtBC,QAAS,OACTC,QAAS,KAEX5B,EAAAA,MAAM,SAAU0B,EAAAA,MAAM,KACtB1B,EAAAA,MAAM,UAAW0B,EAAAA,MAAM,CAAEE,QAAS,KAClCC,EAAAA,WAAW,qBACTC,EAAAA,QAAQ,kCAEVD,EAAAA,WAAW,oBACTC,EAAAA,QAAQ,qCAIdC,qBAAqB,+CAtCdpH,SADkB3G,SAPzB8K,EAAAA,gDAuDCkD,EAAAA,YAAWvO,KAAA,CAAC,wBAEZuO,EAAAA,YAAWvO,KAAA,CAAC,+BAmFZwO,EAAAA,aAAYxO,KAAA,CAAC,8BAUbwO,EAAAA,aAAYxO,KAAA,CAAC,wCAabwO,EAAAA,aAAYxO,KAAA,CAAC,sBC3KhByO,4BAEc,oBACE,oBACA,0BACM,mBACN,CACZtG,MAAO,cACPC,KAAM,aACNF,QAAS,gBACTG,QAAS,qCAIMiD,oBACH,eAEJ,yBACQ,qBACL,oBACC,kBACD,2BACG,kCACH,gCACE,4BACN,wBACE,uBACI,uBACE,yBACgC,cChCnDoD,EAAA,WAwBE,SAAAA,EAAoCC,GAClC,GAAIA,EACF,MAAM,IAAI7E,MAAM,wGAGb4E,EAAAE,QAAP,SAAenO,GACb,YADa,IAAAA,IAAAA,EAAA,IACN,CACLoO,SAAUH,EACVI,UAAW,CACT,CAAEC,QAAS/H,EAAcgI,SAAU,CAAEvO,OAAMA,EAAE+G,SAAUiH,IACvDnK,EACAS,EACAmC,yBAnBP9G,EAAAA,SAAQJ,KAAA,CAAC,CACRiP,QAAS,CAACC,EAAAA,cACV5O,QAAS,CAACgL,GACVjL,aAAc,CAACiL,GACf6D,gBAAiB,CAAC7D,gDAEPoD,EAAYU,WAAA,CAAA,CAAArH,KACVsH,EAAAA,UAAQ,CAAAtH,KAAIuH,EAAAA,gBAxB3B,GCAAC,EAAA,WA8DE,SAAAA,EACYhE,EACHd,EACG+E,GAHZ,IAAA1O,EAAAnB,KACYA,KAAA4L,cAAAA,EACH5L,KAAA8K,aAAAA,EACG9K,KAAA6P,OAAAA,cAvBH,oBAE4B,cAW7B,WAYN7P,KAAKe,QAAU+J,EAAa/J,QAC5Bf,KAAKgB,MAAQ8J,EAAa9J,MAC1BhB,KAAKgM,QAAUlB,EAAahK,OAC5Bd,KAAKiM,aAAkBnB,EAAa7J,UAAS,IAC3C6J,EAAahK,OAAOoL,WAEtBlM,KAAKmM,IAAMrB,EAAa5J,SAAS4F,gBAAgBxF,UAAU,WACzDH,EAAKiL,kBAEPpM,KAAKqM,KAAOvB,EAAa5J,SAASqF,eAAejF,UAAU,WACzDH,EAAKgI,wCA9BLyG,EAAA3P,UAAA,eAAY,gBACd,MAAmB,aAAfD,KAAK4M,MACA,OAEF,2CA6BTgD,EAAA3P,UAAAqM,YAAA,WACEtM,KAAKmM,IAAII,cACTvM,KAAKqM,KAAKE,cACVC,cAAcxM,KAAKyM,YACnBC,aAAa1M,KAAK2M,UAKpBiD,EAAA3P,UAAAmM,cAAA,WAAA,IAAAjL,EAAAnB,KACEA,KAAK4M,MAAQ,UACR5M,KAAKgM,QAAQa,gBAAkB7M,KAAKgM,QAAQc,UAC/C9M,KAAK2M,QAAUtB,WAAW,WACxBlK,EAAKgI,UACJnJ,KAAKgM,QAAQc,SAChB9M,KAAKgN,UAAW,IAAIC,MAAOC,UAAYlN,KAAKgM,QAAQc,QAChD9M,KAAKgM,QAAQmB,cACfnN,KAAKyM,WAAawB,YAAY,WAAM,OAAA9M,EAAKkM,kBAAkB,MAG3DrN,KAAKgM,QAAQjC,gBACf/J,KAAK6P,OAAOC,QAMhBF,EAAA3P,UAAAoN,eAAA,WACE,GAAmB,IAAfrN,KAAKsN,OAA8B,MAAftN,KAAKsN,OAAkBtN,KAAKgM,QAAQc,QAA5D,CAGA,IAAMS,GAAM,IAAIN,MAAOC,UACjBM,EAAYxN,KAAKgN,SAAWO,EAClCvN,KAAKsN,MAAQE,EAAYxN,KAAKgM,QAAQc,QAAU,IACT,eAAnC9M,KAAKgM,QAAQyB,oBACfzN,KAAKsN,MAAQ,IAAMtN,KAAKsN,OAEtBtN,KAAKsN,OAAS,IAChBtN,KAAKsN,MAAQ,GAEG,KAAdtN,KAAKsN,QACPtN,KAAKsN,MAAQ,OAOjBsC,EAAA3P,UAAAkJ,OAAA,WAAA,IAAAhI,EAAAnB,KACqB,YAAfA,KAAK4M,QAGTF,aAAa1M,KAAK2M,SAClB3M,KAAK4M,MAAQ,UACb5M,KAAK2M,QAAUtB,WACb,WAAM,OAAAlK,EAAKyK,cAAczC,OAAOhI,EAAK2J,aAAajK,aAItD+O,EAAA3P,UAAAyN,oBACqB,YAAf1N,KAAK4M,QAGT5M,KAAK8K,aAAapJ,aACd1B,KAAKgM,QAAQpK,cACf5B,KAAKmJ,WAITyG,EAAA3P,UAAA0N,uBACqB,YAAf3N,KAAK4M,QAGTF,aAAa1M,KAAK2M,SAClB3M,KAAKgM,QAAQc,QAAU,EACvB9M,KAAKgN,SAAW,EAGhBR,cAAcxM,KAAKyM,YACnBzM,KAAKsN,MAAQ,IAGfsC,EAAA3P,UAAA2N,uCACM5N,KAAKgM,QAAQa,gBACqB,IAAjC7M,KAAKgM,QAAQ6B,iBACE,YAAf7N,KAAK4M,QAGV5M,KAAK2M,QAAUtB,WACb,WAAM,OAAAlK,EAAKgI,UACXnJ,KAAKgM,QAAQ6B,iBAEf7N,KAAKgM,QAAQc,QAAU9M,KAAKgM,QAAQ6B,gBACpC7N,KAAKgN,UAAW,IAAIC,MAAOC,WAAalN,KAAKgM,QAAQc,SAAW,GAChE9M,KAAKsN,OAAS,EACVtN,KAAKgM,QAAQmB,cACfnN,KAAKyM,WAAawB,YAAY,WAAM,OAAA9M,EAAKkM,kBAAkB,2BAhKhEa,EAAAA,UAAS7N,KAAA,CAAC,CACTC,SAAU,oBACV6N,SAAU,qvBAJH5G,SADkB3G,SAXzBqF,EAAAA,wDA0CC2I,EAAAA,YAAWvO,KAAA,CAAC,+BAEZuO,EAAAA,YAAWvO,KAAA,CAAC,mCA4FZwO,EAAAA,aAAYxO,KAAA,CAAC,8BAUbwO,EAAAA,aAAYxO,KAAA,CAAC,wCAabwO,EAAAA,aAAYxO,KAAA,CAAC,mBAjKhB,yDAqLCI,EAAAA,SAAQJ,KAAA,CAAC,CACRiP,QAAS,CAACC,EAAAA,cACV7O,aAAc,CAACkP,GACfjP,QAAS,CAACiP,GACVJ,gBAAiB,CAACI","sourcesContent":["import {\n  Directive,\n  ElementRef,\n  NgModule,\n} from '@angular/core';\n\n@Directive({\n  selector: '[toastContainer]',\n  exportAs: 'toastContainer',\n})\nexport class ToastContainerDirective {\n  constructor(private el: ElementRef) { }\n  getContainerElement(): HTMLElement {\n    return this.el.nativeElement;\n  }\n}\n\n@NgModule({\n  declarations: [ToastContainerDirective],\n  exports: [ToastContainerDirective],\n})\nexport class ToastContainerModule {}\n","import { SafeHtml } from '@angular/platform-browser';\n\nimport { Observable, Subject } from 'rxjs';\n\nimport { ComponentType } from '../portal/portal';\nimport { ToastRef } from './toast-injector';\n\n/**\n * Configuration for an individual toast.\n */\n export interface IndividualConfig {\n  /**\n   * disable both timeOut and extendedTimeOut\n   * default: false\n   */\n  disableTimeOut: boolean;\n  /**\n  * toast time to live in milliseconds\n  * default: 5000\n  */\n  timeOut: number;\n  /**\n  * toast show close button\n  * default: false\n  */\n  closeButton: boolean;\n  /**\n  * time to close after a user hovers over toast\n  * default: 1000\n   */\n  extendedTimeOut: number;\n  /**\n   * show toast progress bar\n   * default: false\n   */\n  progressBar: boolean;\n\n  /**\n   * changes toast progress bar animation\n   * default: decreasing\n   */\n  progressAnimation?: 'increasing' | 'decreasing';\n  /**\n   * render html in toast message (possibly unsafe)\n   * default: false\n   */\n  enableHtml: boolean;\n  /**\n   * css class on toast component\n   * default: toast\n   */\n  toastClass: string;\n  /**\n   * css class on toast container\n   * default: toast-top-right\n   */\n  positionClass: string;\n  /**\n   * css class on to toast title\n   * default: toast-title\n   */\n  titleClass: string;\n  /**\n   * css class on to toast title\n   * default: toast-title\n   */\n  messageClass: string;\n  /**\n   * animation easing on toast\n   * default: ease-in\n   */\n  easing: string;\n  /**\n   * animation ease time on toast\n   * default: 300\n   */\n  easeTime: string | number;\n  /**\n   * clicking on toast dismisses it\n   * default: true\n   */\n  tapToDismiss: boolean;\n  /**\n   * Angular toast component to be shown\n   * default: Toast\n   */\n  toastComponent: ComponentType<any>;\n  /**\n   * Helps show toast from a websocket or from event outside Angular\n   * default: false\n   */\n  onActivateTick: boolean;\n}\n\nexport interface ToastrIconClasses {\n  error: string;\n  info: string;\n  success: string;\n  warning: string;\n}\n\n/**\n * Global Toast configuration\n * Includes all IndividualConfig\n */\nexport interface GlobalConfig extends IndividualConfig {\n  /**\n   * max toasts opened. Toasts will be queued\n   * Zero is unlimited\n   * default: 0\n   */\n  maxOpened: number;\n  /**\n   * dismiss current toast when max is reached\n   * default: false\n   */\n  autoDismiss: boolean;\n  iconClasses: Partial<ToastrIconClasses>;\n  /**\n   * New toast placement\n   * default: true\n   */\n  newestOnTop: boolean;\n  /**\n   * block duplicate messages\n   * default: false\n   */\n  preventDuplicates: boolean;\n}\n\n/**\n * Everything a toast needs to launch\n */\nexport class ToastPackage {\n  private _onTap = new Subject<any>();\n  private _onAction = new Subject<any>();\n\n  constructor(\n    public toastId: number,\n    public config: IndividualConfig,\n    public message: string | SafeHtml | null | undefined,\n    public title: string | undefined,\n    public toastType: string,\n    public toastRef: ToastRef<any>,\n  ) {\n    this.toastRef.afterClosed().subscribe(() => {\n      this._onAction.complete();\n      this._onTap.complete();\n    });\n  }\n\n  /** Fired on click */\n  triggerTap() {\n    this._onTap.next();\n    if (this.config.tapToDismiss) {\n      this._onTap.complete();\n    }\n  }\n\n  onTap(): Observable<any> {\n    return this._onTap.asObservable();\n  }\n\n  /** available for use in custom toast */\n  triggerAction(action?: any) {\n    this._onAction.next(action);\n  }\n\n  onAction(): Observable<any> {\n    return this._onAction.asObservable();\n  }\n}\n\n/* tslint:disable:no-empty-interface */\nexport interface GlobalToastrConfig extends GlobalConfig {}\nexport interface IndividualToastrConfig extends IndividualConfig {}\nexport interface ToastrConfig extends IndividualConfig {}\n","import {\n  ComponentRef,\n  Injector,\n  ViewContainerRef\n} from '@angular/core';\n\nexport interface ComponentType<T> {\n  new (...args: any[]): T;\n}\n\n\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n */\nexport class ComponentPortal<T> {\n  private _attachedHost?: BasePortalHost;\n  /** The type of the component that will be instantiated for attachment. */\n  component: ComponentType<T>;\n\n  /**\n   * [Optional] Where the attached component should live in Angular's *logical* component tree.\n   * This is different from where the component *renders*, which is determined by the PortalHost.\n   * The origin necessary when the host is outside of the Angular application context.\n   */\n  viewContainerRef: ViewContainerRef;\n\n  /** Injector used for the instantiation of the component. */\n  injector: Injector;\n\n  constructor(component: ComponentType<T>, injector: Injector) {\n    this.component = component;\n    this.injector = injector;\n  }\n\n  /** Attach this portal to a host. */\n  attach(host: BasePortalHost, newestOnTop: boolean) {\n    this._attachedHost = host;\n    return host.attach(this, newestOnTop);\n  }\n\n  /** Detach this portal from its host */\n  detach() {\n    const host = this._attachedHost;\n    if (host) {\n      this._attachedHost = undefined;\n      return host.detach();\n    }\n  }\n\n  /** Whether this portal is attached to a host. */\n  get isAttached(): boolean {\n    return this._attachedHost != null;\n  }\n\n  /**\n   * Sets the PortalHost reference without performing `attach()`. This is used directly by\n   * the PortalHost when it is performing an `attach()` or `detach()`.\n   */\n  setAttachedHost(host?: BasePortalHost) {\n    this._attachedHost = host;\n  }\n}\n\n/**\n * Partial implementation of PortalHost that only deals with attaching a\n * ComponentPortal\n */\nexport abstract class BasePortalHost {\n  /** The portal currently attached to the host. */\n  private _attachedPortal?: ComponentPortal<any>;\n\n  /** A function that will permanently dispose this host. */\n  private _disposeFn?: () => void;\n\n  attach(portal: ComponentPortal<any>, newestOnTop: boolean) {\n    this._attachedPortal = portal;\n    return this.attachComponentPortal(portal, newestOnTop);\n  }\n\n  abstract attachComponentPortal<T>(portal: ComponentPortal<T>, newestOnTop: boolean): ComponentRef<T>;\n\n  detach() {\n    if (this._attachedPortal) {\n      this._attachedPortal.setAttachedHost();\n    }\n\n    this._attachedPortal = undefined;\n    if (this._disposeFn) {\n      this._disposeFn();\n      this._disposeFn = undefined;\n    }\n  }\n\n  setDisposeFn(fn: () => void) {\n    this._disposeFn = fn;\n  }\n}\n","import {\n  ApplicationRef,\n  ComponentFactoryResolver,\n  ComponentRef,\n  EmbeddedViewRef,\n} from '@angular/core';\nimport { BasePortalHost, ComponentPortal } from './portal';\n\n/**\n * A PortalHost for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n *\n * This is the only part of the portal core that directly touches the DOM.\n */\nexport class DomPortalHost extends BasePortalHost {\n  constructor(\n    private _hostDomElement: Element,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n  ) {\n    super();\n  }\n\n  /**\n   * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n   * @param portal Portal to be attached\n   */\n  attachComponentPortal<T>(\n    portal: ComponentPortal<T>,\n    newestOnTop: boolean,\n  ): ComponentRef<T> {\n    const componentFactory = this._componentFactoryResolver.resolveComponentFactory(\n      portal.component,\n    );\n    let componentRef: ComponentRef<T>;\n\n    // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n    // for the component (in terms of Angular's component tree, not rendering).\n    // When the ViewContainerRef is missing, we use the factory to create the component directly\n    // and then manually attach the ChangeDetector for that component to the application (which\n    // happens automatically when using a ViewContainer).\n    componentRef = componentFactory.create(portal.injector);\n\n    // When creating a component outside of a ViewContainer, we need to manually register\n    // its ChangeDetector with the application. This API is unfortunately not yet published\n    // in Angular core. The change detector must also be deregistered when the component\n    // is destroyed to prevent memory leaks.\n    this._appRef.attachView(componentRef.hostView);\n\n    this.setDisposeFn(() => {\n      this._appRef.detachView(componentRef.hostView);\n      componentRef.destroy();\n    });\n\n    // At this point the component has been instantiated, so we move it to the location in the DOM\n    // where we want it to be rendered.\n    if (newestOnTop) {\n      this._hostDomElement.insertBefore(\n        this._getComponentRootNode(componentRef),\n        this._hostDomElement.firstChild,\n      );\n    } else {\n      this._hostDomElement.appendChild(\n        this._getComponentRootNode(componentRef),\n      );\n    }\n\n    return componentRef;\n  }\n\n  /** Gets the root HTMLElement for an instantiated component. */\n  private _getComponentRootNode(componentRef: ComponentRef<any>): HTMLElement {\n    return (componentRef.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n  }\n}\n","import { ComponentRef } from '@angular/core';\nimport { BasePortalHost, ComponentPortal } from '../portal/portal';\n\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nexport class OverlayRef {\n  constructor(private _portalHost: BasePortalHost) {}\n\n  attach(\n    portal: ComponentPortal<any>,\n    newestOnTop: boolean = true,\n  ): ComponentRef<any> {\n    return this._portalHost.attach(portal, newestOnTop);\n  }\n\n  /**\n   * Detaches an overlay from a portal.\n   * @returns Resolves when the overlay has been detached.\n   */\n  detach() {\n    return this._portalHost.detach();\n  }\n}\n","/**\n * The OverlayContainer is the container in which all overlays will load.\n * It should be provided in the root component to ensure it is properly shared.\n */\nexport class OverlayContainer {\n  private _containerElement: HTMLElement;\n\n  /**\n   * This method returns the overlay container element.  It will lazily\n   * create the element the first time  it is called to facilitate using\n   * the container in non-browser environments.\n   * @returns the container element\n   */\n  getContainerElement(): HTMLElement {\n    if (!this._containerElement) { this._createContainer(); }\n    return this._containerElement;\n  }\n\n  /**\n   * Create the overlay container element, which is simply a div\n   * with the 'cdk-overlay-container' class on the document body.\n   */\n  private _createContainer(): void {\n    const container = document.createElement('div');\n    container.classList.add('overlay-container');\n    document.body.appendChild(container);\n    this._containerElement = container;\n  }\n}\n","import { ApplicationRef, ComponentFactoryResolver, Injectable } from '@angular/core';\nimport { DomPortalHost } from '../portal/dom-portal-host';\nimport { OverlayRef } from './overlay-ref';\n\nimport { ToastContainerDirective } from '../toastr/toast.directive';\nimport { OverlayContainer } from './overlay-container';\n\n\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalHost, so any kind of Portal can be loaded into one.\n */\n @Injectable()\n  export class Overlay {\n    private _paneElements: {string?: HTMLElement} = {};\n    constructor(private _overlayContainer: OverlayContainer,\n                private _componentFactoryResolver: ComponentFactoryResolver,\n                private _appRef: ApplicationRef) {}\n  /**\n   * Creates an overlay.\n   * @returns A reference to the created overlay.\n   */\n  create(positionClass?: string, overlayContainer?: ToastContainerDirective): OverlayRef {\n    // get existing pane if possible\n    return this._createOverlayRef(this.getPaneElement(positionClass, overlayContainer));\n  }\n\n  getPaneElement(positionClass: string = '', overlayContainer?: ToastContainerDirective): HTMLElement {\n    if (!this._paneElements[positionClass]) {\n      this._paneElements[positionClass] = this._createPaneElement(positionClass, overlayContainer);\n    }\n    return this._paneElements[positionClass];\n  }\n\n  /**\n   * Creates the DOM element for an overlay and appends it to the overlay container.\n   * @returns Newly-created pane element\n   */\n  private _createPaneElement(positionClass: string, overlayContainer?: ToastContainerDirective): HTMLElement {\n    const pane = document.createElement('div');\n    pane.id = 'toast-container';\n    pane.classList.add(positionClass);\n    pane.classList.add('toast-container');\n\n    if (!overlayContainer) {\n      this._overlayContainer.getContainerElement().appendChild(pane);\n    } else {\n      overlayContainer.getContainerElement().appendChild(pane);\n    }\n    return pane;\n  }\n\n  /**\n   * Create a DomPortalHost into which the overlay content can be loaded.\n   * @param pane The DOM element to turn into a portal host.\n   * @returns A portal host for the given DOM element.\n   */\n  private _createPortalHost(pane: HTMLElement): DomPortalHost {\n    return new DomPortalHost(pane, this._componentFactoryResolver, this._appRef);\n  }\n\n  /**\n   * Creates an OverlayRef for an overlay in the given DOM element.\n   * @param pane DOM element for the overlay\n   */\n  private _createOverlayRef(pane: HTMLElement): OverlayRef {\n    return new OverlayRef(this._createPortalHost(pane));\n  }\n}\n\n\n/** Providers for Overlay and its related injectables. */\nexport const OVERLAY_PROVIDERS = [\n  Overlay,\n  OverlayContainer,\n];\n","import { Injector } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\n\nimport { OverlayRef } from '../overlay/overlay-ref';\nimport { ToastPackage } from './toastr-config';\n\n/**\n * Reference to a toast opened via the Toastr service.\n */\nexport class ToastRef<T> {\n  /** The instance of component opened into the toast. */\n  componentInstance: T;\n\n  /** Subject for notifying the user that the toast has finished closing. */\n  private _afterClosed = new Subject<any>();\n  /** triggered when toast is activated */\n  private _activate = new Subject<any>();\n  /** notifies the toast that it should close before the timeout */\n  private _manualClose = new Subject<any>();\n\n  constructor(private _overlayRef: OverlayRef) { }\n\n  manualClose() {\n    this._manualClose.next();\n    this._manualClose.complete();\n  }\n\n  manualClosed(): Observable<any> {\n    return this._manualClose.asObservable();\n  }\n\n  /**\n   * Close the toast.\n   */\n  close(): void {\n    this._overlayRef.detach();\n    this._afterClosed.next();\n    this._afterClosed.complete();\n    this._manualClose.complete();\n    this._activate.complete();\n  }\n\n  /** Gets an observable that is notified when the toast is finished closing. */\n  afterClosed(): Observable<any> {\n    return this._afterClosed.asObservable();\n  }\n\n  isInactive() {\n    return this._activate.isStopped;\n  }\n\n  activate() {\n    this._activate.next();\n    this._activate.complete();\n  }\n\n  /** Gets an observable that is notified when the toast has started opening. */\n  afterActivate(): Observable<any> {\n    return this._activate.asObservable();\n  }\n}\n\n\n/** Custom injector type specifically for instantiating components with a toast. */\nexport class ToastInjector implements Injector {\n  constructor(\n    private _toastPackage: ToastPackage,\n    private _parentInjector: Injector) { }\n\n  get(token: any, notFoundValue?: any): any {\n    if (token === ToastPackage && this._toastPackage) {\n      return this._toastPackage;\n    }\n    return this._parentInjector.get(token, notFoundValue);\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\nimport { GlobalConfig } from './toastr-config';\n\nexport interface ToastToken {\n  config: GlobalConfig;\n  defaults: any;\n}\n\nexport const TOAST_CONFIG = new InjectionToken<ToastToken>('ToastConfig');\n","import {\n  ComponentRef,\n  Inject,\n  Injectable,\n  Injector,\n  NgZone,\n  SecurityContext\n} from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\n\nimport { Observable } from 'rxjs';\n\nimport { Overlay } from '../overlay/overlay';\nimport { ComponentPortal } from '../portal/portal';\nimport { ToastInjector, ToastRef } from './toast-injector';\nimport { ToastToken, TOAST_CONFIG } from './toast-token';\nimport { ToastContainerDirective } from './toast.directive';\nimport {\n  GlobalConfig,\n  IndividualConfig,\n  ToastPackage,\n} from './toastr-config';\n\n\nexport interface ActiveToast<C> {\n  /** Your Toast ID. Use this to close it individually */\n  toastId: number;\n  /** the message of your toast. Stored to prevent duplicates */\n  message: string;\n  /** a reference to the component see portal.ts */\n  portal: ComponentRef<C>;\n  /** a reference to your toast */\n  toastRef: ToastRef<C>;\n  /** triggered when toast is active */\n  onShown: Observable<any>;\n  /** triggered when toast is destroyed */\n  onHidden: Observable<any>;\n  /** triggered on toast click */\n  onTap: Observable<any>;\n  /** available for your use in custom toast */\n  onAction: Observable<any>;\n}\n\n@Injectable()\nexport class ToastrService {\n  toastrConfig: GlobalConfig;\n  currentlyActive = 0;\n  toasts: ActiveToast<any>[] = [];\n  overlayContainer: ToastContainerDirective;\n  previousToastMessage: string | undefined;\n  private index = 0;\n\n  constructor(\n    @Inject(TOAST_CONFIG) token: ToastToken,\n    private overlay: Overlay,\n    private _injector: Injector,\n    private sanitizer: DomSanitizer,\n    private ngZone: NgZone\n  ) {\n    const defaultConfig = new token.defaults;\n    this.toastrConfig = { ...defaultConfig, ...token.config };\n    this.toastrConfig.iconClasses = {\n      ...defaultConfig.iconClasses,\n      ...token.config.iconClasses,\n    };\n  }\n  /** show toast */\n  show(message?: string, title?: string, override: Partial<IndividualConfig> = {}, type = '') {\n    return this._preBuildNotification(type, message, title, this.applyConfig(override));\n  }\n  /** show successful toast */\n  success(message?: string, title?: string, override: Partial<IndividualConfig> = {}) {\n    const type = this.toastrConfig.iconClasses.success || '';\n    return this._preBuildNotification(type, message, title, this.applyConfig(override));\n  }\n  /** show error toast */\n  error(message?: string, title?: string, override: Partial<IndividualConfig> = {}) {\n    const type = this.toastrConfig.iconClasses.error || '';\n    return this._preBuildNotification(type, message, title, this.applyConfig(override));\n  }\n  /** show info toast */\n  info(message?: string, title?: string, override: Partial<IndividualConfig> = {}) {\n    const type = this.toastrConfig.iconClasses.info || '';\n    return this._preBuildNotification(type, message, title, this.applyConfig(override));\n  }\n  /** show warning toast */\n  warning(message?: string, title?: string, override: Partial<IndividualConfig> = {}) {\n    const type = this.toastrConfig.iconClasses.warning || '';\n    return this._preBuildNotification(type, message, title, this.applyConfig(override));\n  }\n  /**\n   * Remove all or a single toast by id\n   */\n  clear(toastId?: number) {\n    // Call every toastRef manualClose function\n    for (const toast of this.toasts) {\n      if (toastId !== undefined) {\n        if (toast.toastId === toastId) {\n          toast.toastRef.manualClose();\n          return;\n        }\n      } else {\n        toast.toastRef.manualClose();\n      }\n    }\n  }\n  /**\n   * Remove and destroy a single toast by id\n   */\n  remove(toastId: number) {\n    const found = this._findToast(toastId);\n    if (!found) {\n      return false;\n    }\n    found.activeToast.toastRef.close();\n    this.toasts.splice(found.index, 1);\n    this.currentlyActive = this.currentlyActive - 1;\n    if (!this.toastrConfig.maxOpened || !this.toasts.length) {\n      return false;\n    }\n    if (this.currentlyActive < this.toastrConfig.maxOpened && this.toasts[this.currentlyActive]) {\n      const p = this.toasts[this.currentlyActive].toastRef;\n      if (!p.isInactive()) {\n        this.currentlyActive = this.currentlyActive + 1;\n        p.activate();\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Determines if toast message is already shown\n   */\n  isDuplicate(message: string) {\n    for (let i = 0; i < this.toasts.length; i++) {\n      if (this.toasts[i].message === message) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /** create a clone of global config and apply individual settings */\n  private applyConfig(override: Partial<IndividualConfig> = {}): GlobalConfig {\n    return { ...this.toastrConfig, ...override };\n  }\n\n  /**\n   * Find toast object by id\n   */\n  private _findToast(toastId: number): { index: number, activeToast: ActiveToast<any> } | null {\n    for (let i = 0; i < this.toasts.length; i++) {\n      if (this.toasts[i].toastId === toastId) {\n        return { index: i, activeToast: this.toasts[i] };\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Determines the need to run inside angular's zone then builds the toast\n   */\n  private _preBuildNotification(\n    toastType: string,\n    message: string | undefined,\n    title: string | undefined,\n    config: GlobalConfig,\n  ): ActiveToast<any> | null {\n    if (config.onActivateTick) {\n      return this.ngZone.run(() => this._buildNotification(toastType, message, title, config));\n    }\n    return this._buildNotification(toastType, message, title, config);\n  }\n\n  /**\n   * Creates and attaches toast data to component\n   * returns null if toast is duplicate and preventDuplicates == True\n   */\n  private _buildNotification(\n    toastType: string,\n    message: string | undefined,\n    title: string | undefined,\n    config: GlobalConfig,\n  ): ActiveToast<any> | null {\n    if (!config.toastComponent) {\n      throw new Error('toastComponent required');\n    }\n    // max opened and auto dismiss = true\n    if (message && this.toastrConfig.preventDuplicates && this.isDuplicate(message)) {\n      return null;\n    }\n    this.previousToastMessage = message;\n    let keepInactive = false;\n    if (this.toastrConfig.maxOpened && this.currentlyActive >= this.toastrConfig.maxOpened) {\n      keepInactive = true;\n      if (this.toastrConfig.autoDismiss) {\n        this.clear(this.toasts[this.toasts.length - 1].toastId);\n      }\n    }\n    const overlayRef = this.overlay.create(config.positionClass, this.overlayContainer);\n    this.index = this.index + 1;\n    let sanitizedMessage: string | SafeHtml | undefined | null = message;\n    if (message && config.enableHtml) {\n      sanitizedMessage = this.sanitizer.sanitize(SecurityContext.HTML, message);\n    }\n    const toastRef = new ToastRef(overlayRef);\n    const toastPackage = new ToastPackage(\n      this.index,\n      config,\n      sanitizedMessage,\n      title,\n      toastType,\n      toastRef,\n    );\n    const toastInjector = new ToastInjector(toastPackage, this._injector);\n    const component = new ComponentPortal(config.toastComponent, toastInjector);\n    const portal = overlayRef.attach(component, this.toastrConfig.newestOnTop);\n    toastRef.componentInstance = (<any>portal)._component;\n    const ins: ActiveToast<any> = {\n      toastId: this.index,\n      message: message || '',\n      toastRef,\n      onShown: toastRef.afterActivate(),\n      onHidden: toastRef.afterClosed(),\n      onTap: toastPackage.onTap(),\n      onAction: toastPackage.onAction(),\n      portal,\n    };\n\n    if (!keepInactive) {\n      setTimeout(() => {\n        ins.toastRef.activate();\n        this.currentlyActive = this.currentlyActive + 1;\n      });\n    }\n\n    this.toasts.push(ins);\n    return ins;\n  }\n}\n","import {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\nimport {\n  Component,\n  HostBinding,\n  HostListener,\n  NgZone,\n  OnDestroy,\n} from '@angular/core';\nimport { SafeHtml } from '@angular/platform-browser';\n\nimport { Subscription } from 'rxjs';\n\nimport { IndividualConfig, ToastPackage } from './toastr-config';\nimport { ToastrService } from './toastr.service';\n\n@Component({\n  selector: '[toast-component]',\n  template: `\n  <button *ngIf=\"options.closeButton\" (click)=\"remove()\" class=\"toast-close-button\" aria-label=\"Close\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button>\n  <div *ngIf=\"title\" [class]=\"options.titleClass\" [attr.aria-label]=\"title\">\n    {{ title }}\n  </div>\n  <div *ngIf=\"message && options.enableHtml\" role=\"alertdialog\" aria-live=\"polite\"\n    [class]=\"options.messageClass\" [innerHTML]=\"message\">\n  </div>\n  <div *ngIf=\"message && !options.enableHtml\" role=\"alertdialog\" aria-live=\"polite\"\n    [class]=\"options.messageClass\" [attr.aria-label]=\"message\">\n    {{ message }}\n  </div>\n  <div *ngIf=\"options.progressBar\">\n    <div class=\"toast-progress\" [style.width]=\"width + '%'\"></div>\n  </div>\n  `,\n  animations: [\n    trigger('flyInOut', [\n      state('inactive', style({\n        display: 'none',\n        opacity: 0,\n      })),\n      state('active', style({})),\n      state('removed', style({ opacity: 0 })),\n      transition('inactive => active',\n        animate('{{ easeTime }}ms {{ easing }}')\n      ),\n      transition('active => removed',\n        animate('{{ easeTime }}ms {{ easing }}'),\n      ),\n    ]),\n  ],\n  preserveWhitespaces: false,\n})\nexport class Toast implements OnDestroy {\n  message?: string | SafeHtml | null;\n  title?: string;\n  options: IndividualConfig;\n  /** width of progress bar */\n  width = -1;\n  /** a combination of toast type and options.toastClass */\n  @HostBinding('class') toastClasses = '';\n  /** controls animation */\n  @HostBinding('@flyInOut') state = {\n    value: 'inactive',\n    params: {\n      easeTime: this.toastPackage.config.easeTime,\n      easing: 'ease-in',\n    },\n  };\n  private timeout: any;\n  private intervalId: any;\n  private hideTime: number;\n  private sub: Subscription;\n  private sub1: Subscription;\n\n  constructor(\n    protected toastrService: ToastrService,\n    public toastPackage: ToastPackage,\n    protected ngZone?: NgZone,\n  ) {\n    this.message = toastPackage.message;\n    this.title = toastPackage.title;\n    this.options = toastPackage.config;\n    this.toastClasses = `${toastPackage.toastType} ${toastPackage.config.toastClass}`;\n    this.sub = toastPackage.toastRef.afterActivate().subscribe(() => {\n      this.activateToast();\n    });\n    this.sub1 = toastPackage.toastRef.manualClosed().subscribe(() => {\n      this.remove();\n    });\n  }\n  ngOnDestroy() {\n    this.sub.unsubscribe();\n    this.sub1.unsubscribe();\n    clearInterval(this.intervalId);\n    clearTimeout(this.timeout);\n  }\n  /**\n   * activates toast and sets timeout\n   */\n  activateToast() {\n    this.state = { ...this.state, value: 'active' };\n    if (!this.options.disableTimeOut && this.options.timeOut) {\n      this.outsideTimeout(() => this.remove(), this.options.timeOut);\n      this.hideTime = new Date().getTime() + this.options.timeOut;\n      if (this.options.progressBar) {\n        this.outsideInterval(() => this.updateProgress(), 10);\n      }\n    }\n  }\n  /**\n   * updates progress bar width\n   */\n  updateProgress() {\n    if (this.width === 0 || this.width === 100 || !this.options.timeOut) {\n      return;\n    }\n    const now = new Date().getTime();\n    const remaining = this.hideTime - now;\n    this.width = (remaining / this.options.timeOut) * 100;\n    if (this.options.progressAnimation === 'increasing') {\n      this.width = 100 - this.width;\n    }\n    if (this.width <= 0) {\n      this.width = 0;\n    }\n    if (this.width >= 100) {\n      this.width = 100;\n    }\n  }\n\n  /**\n   * tells toastrService to remove this toast after animation time\n   */\n  remove() {\n    if (this.state.value === 'removed') {\n      return;\n    }\n    clearTimeout(this.timeout);\n    this.state = {...this.state, value: 'removed'};\n    this.outsideTimeout(() =>\n        this.toastrService.remove(this.toastPackage.toastId),\n        +this.toastPackage.config.easeTime,\n      );\n  }\n  @HostListener('click')\n  tapToast() {\n    if (this.state.value === 'removed') {\n      return;\n    }\n    this.toastPackage.triggerTap();\n    if (this.options.tapToDismiss) {\n      this.remove();\n    }\n  }\n  @HostListener('mouseenter')\n  stickAround() {\n    if (this.state.value === 'removed') {\n      return;\n    }\n    clearTimeout(this.timeout);\n    this.options.timeOut = 0;\n    this.hideTime = 0;\n\n    // disable progressBar\n    clearInterval(this.intervalId);\n    this.width = 0;\n  }\n  @HostListener('mouseleave')\n  delayedHideToast() {\n    if (this.options.disableTimeOut\n      || this.options.extendedTimeOut === 0\n      || this.state.value === 'removed') {\n      return;\n    }\n    this.outsideTimeout(() => this.remove(), this.options.extendedTimeOut);\n    this.options.timeOut = this.options.extendedTimeOut;\n    this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n    this.width = -1;\n    if (this.options.progressBar) {\n      this.outsideInterval(() => this.updateProgress(), 10);\n    }\n  }\n\n  outsideTimeout(func: Function, timeout: number) {\n    if (this.ngZone) {\n      this.ngZone.runOutsideAngular(() =>\n        this.timeout = setTimeout(() => this.runInsideAngular(func), timeout)\n      );\n    } else {\n      this.timeout = setTimeout(() => func(), timeout);\n    }\n  }\n\n  outsideInterval(func: Function, timeout: number) {\n    if (this.ngZone) {\n      this.ngZone.runOutsideAngular(() =>\n        this.intervalId = setInterval(() => this.runInsideAngular(func), timeout)\n      );\n    } else {\n      this.intervalId = setInterval(() => func(), timeout);\n    }\n  }\n\n  private runInsideAngular(func: Function) {\n    if (this.ngZone) {\n      this.ngZone.run(() => func());\n    } else {\n      func();\n    }\n  }\n\n}\n","import { Toast } from './toast.component';\nimport { GlobalConfig } from './toastr-config';\n\nexport class DefaultGlobalConfig implements GlobalConfig {\n  // Global\n  maxOpened = 0;\n  autoDismiss = false;\n  newestOnTop = true;\n  preventDuplicates = false;\n  iconClasses = {\n    error: 'toast-error',\n    info: 'toast-info',\n    success: 'toast-success',\n    warning: 'toast-warning',\n  };\n\n  // Individual\n  toastComponent = Toast;\n  closeButton = false;\n  disableTimeOut: false;\n  timeOut = 5000;\n  extendedTimeOut = 1000;\n  enableHtml = false;\n  progressBar = false;\n  toastClass = 'toast';\n  positionClass = 'toast-top-right';\n  titleClass = 'toast-title';\n  messageClass = 'toast-message';\n  easing = 'ease-in';\n  easeTime = 300;\n  tapToDismiss = true;\n  onActivateTick = false;\n  progressAnimation: 'decreasing' | 'increasing' = 'decreasing';\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  ModuleWithProviders,\n  NgModule,\n  Optional,\n  SkipSelf,\n} from '@angular/core';\n\nimport { Overlay } from '../overlay/overlay';\nimport { OverlayContainer } from '../overlay/overlay-container';\nimport { DefaultGlobalConfig } from './default-config';\nimport { TOAST_CONFIG } from './toast-token';\nimport { Toast } from './toast.component';\nimport { GlobalConfig } from './toastr-config';\nimport { ToastrService } from './toastr.service';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [Toast],\n  declarations: [Toast],\n  entryComponents: [Toast],\n})\nexport class ToastrModule {\n  constructor(@Optional() @SkipSelf() parentModule: ToastrModule) {\n    if (parentModule) {\n      throw new Error('ToastrModule is already loaded. It should only be imported in your application\\'s main module.');\n    }\n  }\n  static forRoot(config: Partial<GlobalConfig> = {}): ModuleWithProviders {\n    return {\n      ngModule: ToastrModule,\n      providers: [\n        { provide: TOAST_CONFIG, useValue: { config, defaults: DefaultGlobalConfig } },\n        OverlayContainer,\n        Overlay,\n        ToastrService,\n      ],\n    };\n  }\n}\n","import { CommonModule } from '@angular/common';\r\nimport {\r\n  ApplicationRef,\r\n  Component,\r\n  HostBinding,\r\n  HostListener,\r\n  NgModule,\r\n  OnDestroy,\r\n} from '@angular/core';\r\nimport { SafeHtml } from '@angular/platform-browser';\r\n\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { IndividualConfig, ToastPackage } from './toastr-config';\r\nimport { ToastrService } from './toastr.service';\r\n\r\n@Component({\r\n  selector: '[toast-component]',\r\n  template: `\r\n  <button *ngIf=\"options.closeButton\" (click)=\"remove()\" class=\"toast-close-button\" aria-label=\"Close\">\r\n    <span aria-hidden=\"true\">&times;</span>\r\n  </button>\r\n  <div *ngIf=\"title\" [class]=\"options.titleClass\" [attr.aria-label]=\"title\">\r\n    {{ title }}\r\n  </div>\r\n  <div *ngIf=\"message && options.enableHtml\" role=\"alert\" aria-live=\"polite\"\r\n    [class]=\"options.messageClass\" [innerHTML]=\"message\">\r\n  </div>\r\n  <div *ngIf=\"message && !options.enableHtml\" role=\"alert\" aria-live=\"polite\"\r\n    [class]=\"options.messageClass\" [attr.aria-label]=\"message\">\r\n    {{ message }}\r\n  </div>\r\n  <div *ngIf=\"options.progressBar\">\r\n    <div class=\"toast-progress\" [style.width]=\"width + '%'\"></div>\r\n  </div>\r\n  `,\r\n})\r\nexport class ToastNoAnimation implements OnDestroy {\r\n  message?: string | SafeHtml | null;\r\n  title?: string;\r\n  options: IndividualConfig;\r\n  /** width of progress bar */\r\n  width = -1;\r\n  /** a combination of toast type and options.toastClass */\r\n  @HostBinding('class') toastClasses = '';\r\n\r\n  @HostBinding('style.display')\r\n  get displayStyle() {\r\n    if (this.state === 'inactive') {\r\n      return 'none';\r\n    }\r\n    return 'inherit';\r\n  }\r\n\r\n  /** controls animation */\r\n  state = 'inactive';\r\n  private timeout: any;\r\n  private intervalId: any;\r\n  private hideTime: number;\r\n  private sub: Subscription;\r\n  private sub1: Subscription;\r\n\r\n  constructor(\r\n    protected toastrService: ToastrService,\r\n    public toastPackage: ToastPackage,\r\n    protected appRef: ApplicationRef,\r\n  ) {\r\n    this.message = toastPackage.message;\r\n    this.title = toastPackage.title;\r\n    this.options = toastPackage.config;\r\n    this.toastClasses = `${toastPackage.toastType} ${\r\n      toastPackage.config.toastClass\r\n    }`;\r\n    this.sub = toastPackage.toastRef.afterActivate().subscribe(() => {\r\n      this.activateToast();\r\n    });\r\n    this.sub1 = toastPackage.toastRef.manualClosed().subscribe(() => {\r\n      this.remove();\r\n    });\r\n  }\r\n  ngOnDestroy() {\r\n    this.sub.unsubscribe();\r\n    this.sub1.unsubscribe();\r\n    clearInterval(this.intervalId);\r\n    clearTimeout(this.timeout);\r\n  }\r\n  /**\r\n   * activates toast and sets timeout\r\n   */\r\n  activateToast() {\r\n    this.state = 'active';\r\n    if (!this.options.disableTimeOut && this.options.timeOut) {\r\n      this.timeout = setTimeout(() => {\r\n        this.remove();\r\n      }, this.options.timeOut);\r\n      this.hideTime = new Date().getTime() + this.options.timeOut;\r\n      if (this.options.progressBar) {\r\n        this.intervalId = setInterval(() => this.updateProgress(), 10);\r\n      }\r\n    }\r\n    if (this.options.onActivateTick) {\r\n      this.appRef.tick();\r\n    }\r\n  }\r\n  /**\r\n   * updates progress bar width\r\n   */\r\n  updateProgress() {\r\n    if (this.width === 0 || this.width === 100 || !this.options.timeOut) {\r\n      return;\r\n    }\r\n    const now = new Date().getTime();\r\n    const remaining = this.hideTime - now;\r\n    this.width = remaining / this.options.timeOut * 100;\r\n    if (this.options.progressAnimation === 'increasing') {\r\n      this.width = 100 - this.width;\r\n    }\r\n    if (this.width <= 0) {\r\n      this.width = 0;\r\n    }\r\n    if (this.width >= 100) {\r\n      this.width = 100;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * tells toastrService to remove this toast after animation time\r\n   */\r\n  remove() {\r\n    if (this.state === 'removed') {\r\n      return;\r\n    }\r\n    clearTimeout(this.timeout);\r\n    this.state = 'removed';\r\n    this.timeout = setTimeout(\r\n      () => this.toastrService.remove(this.toastPackage.toastId),\r\n    );\r\n  }\r\n  @HostListener('click')\r\n  tapToast() {\r\n    if (this.state === 'removed') {\r\n      return;\r\n    }\r\n    this.toastPackage.triggerTap();\r\n    if (this.options.tapToDismiss) {\r\n      this.remove();\r\n    }\r\n  }\r\n  @HostListener('mouseenter')\r\n  stickAround() {\r\n    if (this.state === 'removed') {\r\n      return;\r\n    }\r\n    clearTimeout(this.timeout);\r\n    this.options.timeOut = 0;\r\n    this.hideTime = 0;\r\n\r\n    // disable progressBar\r\n    clearInterval(this.intervalId);\r\n    this.width = 0;\r\n  }\r\n  @HostListener('mouseleave')\r\n  delayedHideToast() {\r\n    if (this.options.disableTimeOut\r\n      || this.options.extendedTimeOut === 0\r\n      || this.state === 'removed') {\r\n      return;\r\n    }\r\n    this.timeout = setTimeout(\r\n      () => this.remove(),\r\n      this.options.extendedTimeOut,\r\n    );\r\n    this.options.timeOut = this.options.extendedTimeOut;\r\n    this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\r\n    this.width = -1;\r\n    if (this.options.progressBar) {\r\n      this.intervalId = setInterval(() => this.updateProgress(), 10);\r\n    }\r\n  }\r\n}\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  declarations: [ToastNoAnimation],\r\n  exports: [ToastNoAnimation],\r\n  entryComponents: [ToastNoAnimation],\r\n})\r\nexport class ToastNoAnimationModule {}\r\n"]}