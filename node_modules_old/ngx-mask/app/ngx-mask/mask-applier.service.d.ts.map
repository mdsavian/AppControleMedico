{"version":3,"file":"mask-applier.service.d.ts","sources":["C:/temp/ControleMedico/AppControleMedico/node_modules/ngx-mask/app/ngx-mask/mask-applier.service.d.ts"],"sourcesContent":["import { IConfig } from './config';\nexport declare enum Separators {\n    SEPARATOR = \"separator\",\n    COMMA_SEPARATOR = \"comma_separator\",\n    DOT_SEPARATOR = \"dot_separator\"\n}\nexport declare class MaskApplierService {\n    protected _config: IConfig;\n    dropSpecialCharacters: IConfig['dropSpecialCharacters'];\n    hiddenInput: IConfig['hiddenInput'];\n    showTemplate: IConfig['showTemplate'];\n    clearIfNotMatch: IConfig['clearIfNotMatch'];\n    maskExpression: string;\n    actualValue: string;\n    shownMaskExpression: string;\n    maskSpecialCharacters: IConfig['specialCharacters'];\n    maskAvailablePatterns: IConfig['patterns'];\n    prefix: IConfig['prefix'];\n    suffix: IConfig['suffix'];\n    customPattern: IConfig['patterns'];\n    ipError?: boolean;\n    showMaskTyped: IConfig['showMaskTyped'];\n    validation: IConfig['validation'];\n    private _shift;\n    constructor(_config: IConfig);\n    applyMaskWithPattern(inputValue: string, maskAndPattern: [string, IConfig['patterns']]): string;\n    applyMask(inputValue: string, maskExpression: string, position?: number, cb?: Function): string;\n    _findSpecialChar(inputSymbol: string): undefined | string;\n    protected _checkSymbolMask(inputSymbol: string, maskSymbol: string): boolean;\n    private separator;\n    private percentage;\n    private getPrecision;\n    private checkInputPrecision;\n    private _checkInput;\n}\n"],"names":[],"mappings":"AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA;"}