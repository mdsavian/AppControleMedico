{"version":3,"sources":["C:/temp/ControleMedico/AppControleMedico/node_modules/ngx-mask/fesm5/ngx-mask.js"],"names":[],"mappings":"AAAA;;;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qCAuaqC,AAE9B;;;;;;;;;;kCAEoB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8BAkRG,AAEvB;;;;;;;;;;;;;;;2FAIa;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kDA2X8B,AAiB3C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAEe;;;;;;;;;;;;;;;;;2BAiBK,AAKpB;;;;;;;;;;4EACU;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wBAkCO;;;;;;;;;;;;gDAMF","file":"ngx-mask.js","sourcesContent":["import { InjectionToken, Injectable, Inject, ElementRef, Renderer2, Input, HostListener, Directive, forwardRef, Pipe, NgModule } from '@angular/core';\nimport { __read, __decorate, __param, __metadata, __extends, __awaiter, __generator, __assign } from 'tslib';\nimport { DOCUMENT } from '@angular/common';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\n\nvar config = new InjectionToken('config');\nvar NEW_CONFIG = new InjectionToken('NEW_CONFIG');\nvar INITIAL_CONFIG = new InjectionToken('INITIAL_CONFIG');\nvar initialConfig = {\n    suffix: '',\n    prefix: '',\n    clearIfNotMatch: false,\n    showTemplate: false,\n    showMaskTyped: false,\n    dropSpecialCharacters: true,\n    hiddenInput: undefined,\n    shownMaskExpression: '',\n    validation: true,\n    // tslint:disable-next-line: quotemark\n    specialCharacters: ['-', '/', '(', ')', '.', ':', ' ', '+', ',', '@', '[', ']', '\"', \"'\"],\n    patterns: {\n        '0': {\n            pattern: new RegExp('\\\\d'),\n        },\n        '9': {\n            pattern: new RegExp('\\\\d'),\n            optional: true,\n        },\n        X: {\n            pattern: new RegExp('\\\\d'),\n            symbol: '*',\n        },\n        A: {\n            pattern: new RegExp('[a-zA-Z0-9]'),\n        },\n        S: {\n            pattern: new RegExp('[a-zA-Z]'),\n        },\n        d: {\n            pattern: new RegExp('\\\\d'),\n        },\n        m: {\n            pattern: new RegExp('\\\\d'),\n        },\n        M: {\n            pattern: new RegExp('\\\\d'),\n        },\n        H: {\n            pattern: new RegExp('\\\\d'),\n        },\n        h: {\n            pattern: new RegExp('\\\\d'),\n        },\n        s: {\n            pattern: new RegExp('\\\\d'),\n        },\n    },\n};\nvar withoutValidation = [\n    'percent',\n    'Hh:m0:s0',\n    'Hh:m0',\n    'Hh',\n    'm0:s0',\n    's0',\n    'm0',\n    'separator',\n    'dot_separator',\n    'comma_separator',\n    'd0/M0/0000',\n    'd0/M0',\n    'd0',\n    'M0',\n];\n\nvar Separators;\n(function (Separators) {\n    Separators[\"SEPARATOR\"] = \"separator\";\n    Separators[\"COMMA_SEPARATOR\"] = \"comma_separator\";\n    Separators[\"DOT_SEPARATOR\"] = \"dot_separator\";\n})(Separators || (Separators = {}));\nvar MaskApplierService = /** @class */ (function () {\n    function MaskApplierService(_config) {\n        this._config = _config;\n        this.maskExpression = '';\n        this.actualValue = '';\n        this.shownMaskExpression = '';\n        this.separator = function (str, char, decimalChar, precision) {\n            str += '';\n            var x = str.split(decimalChar);\n            var decimals = x.length > 1 ? \"\" + decimalChar + x[1] : '';\n            var res = x[0];\n            var rgx = /(\\d+)(\\d{3})/;\n            while (rgx.test(res)) {\n                res = res.replace(rgx, '$1' + char + '$2');\n            }\n            if (precision === undefined) {\n                return res + decimals;\n            }\n            else if (precision === 0) {\n                return res;\n            }\n            return res + decimals.substr(0, precision + 1);\n        };\n        this.percentage = function (str) {\n            return Number(str) >= 0 && Number(str) <= 100;\n        };\n        this.getPrecision = function (maskExpression) {\n            var x = maskExpression.split('.');\n            if (x.length > 1) {\n                return Number(x[x.length - 1]);\n            }\n            return Infinity;\n        };\n        this.checkInputPrecision = function (inputValue, precision, decimalMarker) {\n            if (precision < Infinity) {\n                var precisionRegEx = void 0;\n                if (decimalMarker === '.') {\n                    precisionRegEx = new RegExp(\"\\\\.\\\\d{\" + precision + \"}.*$\");\n                }\n                else {\n                    precisionRegEx = new RegExp(\",\\\\d{\" + precision + \"}.*$\");\n                }\n                var precisionMatch = inputValue.match(precisionRegEx);\n                if (precisionMatch && precisionMatch[0].length - 1 > precision) {\n                    inputValue = inputValue.substring(0, inputValue.length - 1);\n                }\n                else if (precision === 0 && inputValue.endsWith(decimalMarker)) {\n                    inputValue = inputValue.substring(0, inputValue.length - 1);\n                }\n            }\n            return inputValue;\n        };\n        this._shift = new Set();\n        this.clearIfNotMatch = this._config.clearIfNotMatch;\n        this.dropSpecialCharacters = this._config.dropSpecialCharacters;\n        this.maskSpecialCharacters = this._config.specialCharacters;\n        this.maskAvailablePatterns = this._config.patterns;\n        this.prefix = this._config.prefix;\n        this.suffix = this._config.suffix;\n        this.hiddenInput = this._config.hiddenInput;\n        this.showMaskTyped = this._config.showMaskTyped;\n        this.validation = this._config.validation;\n    }\n    // tslint:disable-next-line:no-any\n    MaskApplierService.prototype.applyMaskWithPattern = function (inputValue, maskAndPattern) {\n        var _a = __read(maskAndPattern, 2), mask = _a[0], customPattern = _a[1];\n        this.customPattern = customPattern;\n        return this.applyMask(inputValue, mask);\n    };\n    MaskApplierService.prototype.applyMask = function (inputValue, maskExpression, position, cb) {\n        if (position === void 0) { position = 0; }\n        if (cb === void 0) { cb = function () { }; }\n        if (inputValue === undefined || inputValue === null || maskExpression === undefined) {\n            return '';\n        }\n        var cursor = 0;\n        var result = \"\";\n        var multi = false;\n        var backspaceShift = false;\n        var shift = 1;\n        if (inputValue.slice(0, this.prefix.length) === this.prefix) {\n            inputValue = inputValue.slice(this.prefix.length, inputValue.length);\n        }\n        var inputArray = inputValue.toString().split('');\n        if (maskExpression === 'IP') {\n            this.ipError = !!(inputArray.filter(function (i) { return i === '.'; }).length < 3 && inputArray.length < 7);\n            maskExpression = '099.099.099.099';\n        }\n        if (maskExpression.startsWith('percent')) {\n            if (inputValue.match('[a-z]|[A-Z]') || inputValue.match(/[-!$%^&*()_+|~=`{}\\[\\]:\";'<>?,\\/]/)) {\n                inputValue = this._checkInput(inputValue);\n                var precision = this.getPrecision(maskExpression);\n                inputValue = this.checkInputPrecision(inputValue, precision, '.');\n            }\n            if (this.percentage(inputValue)) {\n                result = inputValue;\n            }\n            else {\n                result = inputValue.substring(0, inputValue.length - 1);\n            }\n        }\n        else if (maskExpression.startsWith(Separators.SEPARATOR) ||\n            maskExpression.startsWith(Separators.DOT_SEPARATOR) ||\n            maskExpression.startsWith(Separators.COMMA_SEPARATOR)) {\n            if (inputValue.match('[wа-яА-Я]') ||\n                inputValue.match('[a-z]|[A-Z]') ||\n                inputValue.match(/[-@#!$%\\\\^&*()_£¬'+|~=`{}\\[\\]:\";<>.?\\/]/)) {\n                inputValue = this._checkInput(inputValue);\n            }\n            var precision = this.getPrecision(maskExpression);\n            var strForSep = void 0;\n            if (maskExpression.startsWith(Separators.SEPARATOR)) {\n                if (inputValue.includes(',') &&\n                    inputValue.endsWith(',') &&\n                    inputValue.indexOf(',') !== inputValue.lastIndexOf(',')) {\n                    inputValue = inputValue.substring(0, inputValue.length - 1);\n                }\n            }\n            if (maskExpression.startsWith(Separators.DOT_SEPARATOR)) {\n                if (inputValue.indexOf('.') !== -1 &&\n                    inputValue.indexOf('.') === inputValue.lastIndexOf('.') &&\n                    inputValue.indexOf('.') > 3) {\n                    inputValue = inputValue.replace('.', ',');\n                }\n                inputValue =\n                    inputValue.length > 1 && inputValue[0] === '0' && inputValue[1] !== ','\n                        ? inputValue.slice(1, inputValue.length)\n                        : inputValue;\n            }\n            if (maskExpression.startsWith(Separators.COMMA_SEPARATOR)) {\n                inputValue =\n                    inputValue.length > 1 && inputValue[0] === '0' && inputValue[1] !== '.'\n                        ? inputValue.slice(1, inputValue.length)\n                        : inputValue;\n            }\n            if (maskExpression.startsWith(Separators.SEPARATOR)) {\n                if (inputValue.match(/[@#!$%^&*()_+|~=`{}\\[\\]:.\";<>?\\/]/)) {\n                    inputValue = inputValue.substring(0, inputValue.length - 1);\n                }\n                inputValue = this.checkInputPrecision(inputValue, precision, ',');\n                strForSep = inputValue.replace(/\\s/g, '');\n                result = this.separator(strForSep, ' ', ',', precision);\n            }\n            else if (maskExpression.startsWith(Separators.DOT_SEPARATOR)) {\n                if (inputValue.match(/[@#!$%^&*()_+|~=`{}\\[\\]:\\s\";<>?\\/]/)) {\n                    inputValue = inputValue.substring(0, inputValue.length - 1);\n                }\n                inputValue = this.checkInputPrecision(inputValue, precision, ',');\n                strForSep = inputValue.replace(/\\./g, '');\n                result = this.separator(strForSep, '.', ',', precision);\n            }\n            else if (maskExpression.startsWith(Separators.COMMA_SEPARATOR)) {\n                strForSep = inputValue.replace(/,/g, '');\n                result = this.separator(strForSep, ',', '.', precision);\n            }\n            var commaShift = result.indexOf(',') - inputValue.indexOf(',');\n            var shiftStep = result.length - inputValue.length;\n            if (shiftStep > 0 && result[position] !== ',') {\n                backspaceShift = true;\n                var _shift = 0;\n                do {\n                    this._shift.add(position + _shift);\n                    _shift++;\n                } while (_shift < shiftStep);\n            }\n            else if ((commaShift !== 0 && position > 0 && !(result.indexOf(',') >= position && position > 3)) ||\n                (!(result.indexOf('.') >= position && position > 3) && shiftStep <= 0)) {\n                this._shift.clear();\n                backspaceShift = true;\n                shift = shiftStep;\n                position += shiftStep;\n                this._shift.add(position);\n            }\n            else {\n                this._shift.clear();\n            }\n        }\n        else {\n            for (\n            // tslint:disable-next-line\n            var i = 0, inputSymbol = inputArray[0]; i < inputArray.length; i++, inputSymbol = inputArray[i]) {\n                if (cursor === maskExpression.length) {\n                    break;\n                }\n                if (this._checkSymbolMask(inputSymbol, maskExpression[cursor]) && maskExpression[cursor + 1] === '?') {\n                    result += inputSymbol;\n                    cursor += 2;\n                }\n                else if (maskExpression[cursor + 1] === '*' &&\n                    multi &&\n                    this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2])) {\n                    result += inputSymbol;\n                    cursor += 3;\n                    multi = false;\n                }\n                else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor]) &&\n                    maskExpression[cursor + 1] === '*') {\n                    result += inputSymbol;\n                    multi = true;\n                }\n                else if (maskExpression[cursor + 1] === '?' &&\n                    this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2])) {\n                    result += inputSymbol;\n                    cursor += 3;\n                }\n                else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor]) ||\n                    (this.hiddenInput &&\n                        this.maskAvailablePatterns[maskExpression[cursor]] &&\n                        this.maskAvailablePatterns[maskExpression[cursor]].symbol === inputSymbol)) {\n                    if (maskExpression[cursor] === 'H') {\n                        if (Number(inputSymbol) > 2) {\n                            cursor += 1;\n                            var shiftStep = /[*?]/g.test(maskExpression.slice(0, cursor))\n                                ? inputArray.length\n                                : cursor;\n                            this._shift.add(shiftStep + this.prefix.length || 0);\n                            i--;\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === 'h') {\n                        if (result === '2' && Number(inputSymbol) > 3) {\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === 'm') {\n                        if (Number(inputSymbol) > 5) {\n                            cursor += 1;\n                            var shiftStep = /[*?]/g.test(maskExpression.slice(0, cursor))\n                                ? inputArray.length\n                                : cursor;\n                            this._shift.add(shiftStep + this.prefix.length || 0);\n                            i--;\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === 's') {\n                        if (Number(inputSymbol) > 5) {\n                            cursor += 1;\n                            var shiftStep = /[*?]/g.test(maskExpression.slice(0, cursor))\n                                ? inputArray.length\n                                : cursor;\n                            this._shift.add(shiftStep + this.prefix.length || 0);\n                            i--;\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === 'd') {\n                        if (Number(inputSymbol) > 3) {\n                            cursor += 1;\n                            var shiftStep = /[*?]/g.test(maskExpression.slice(0, cursor))\n                                ? inputArray.length\n                                : cursor;\n                            this._shift.add(shiftStep + this.prefix.length || 0);\n                            i--;\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor - 1] === 'd') {\n                        if (Number(inputValue.slice(cursor - 1, cursor + 1)) > 31) {\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === 'M') {\n                        if (Number(inputSymbol) > 1) {\n                            cursor += 1;\n                            var shiftStep = /[*?]/g.test(maskExpression.slice(0, cursor))\n                                ? inputArray.length\n                                : cursor;\n                            this._shift.add(shiftStep + this.prefix.length || 0);\n                            i--;\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor - 1] === 'M') {\n                        if (Number(inputValue.slice(cursor - 1, cursor + 1)) > 12) {\n                            continue;\n                        }\n                    }\n                    result += inputSymbol;\n                    cursor++;\n                }\n                else if (this.maskSpecialCharacters.indexOf(maskExpression[cursor]) !== -1) {\n                    result += maskExpression[cursor];\n                    cursor++;\n                    var shiftStep = /[*?]/g.test(maskExpression.slice(0, cursor))\n                        ? inputArray.length\n                        : cursor;\n                    this._shift.add(shiftStep + this.prefix.length || 0);\n                    i--;\n                }\n                else if (this.maskSpecialCharacters.indexOf(inputSymbol) > -1 &&\n                    this.maskAvailablePatterns[maskExpression[cursor]] &&\n                    this.maskAvailablePatterns[maskExpression[cursor]].optional) {\n                    cursor++;\n                    i--;\n                }\n                else if (this.maskExpression[cursor + 1] === '*' &&\n                    this._findSpecialChar(this.maskExpression[cursor + 2]) &&\n                    this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] &&\n                    multi) {\n                    cursor += 3;\n                    result += inputSymbol;\n                }\n                else if (this.maskExpression[cursor + 1] === '?' &&\n                    this._findSpecialChar(this.maskExpression[cursor + 2]) &&\n                    this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] &&\n                    multi) {\n                    cursor += 3;\n                    result += inputSymbol;\n                }\n            }\n        }\n        if (result.length + 1 === maskExpression.length &&\n            this.maskSpecialCharacters.indexOf(maskExpression[maskExpression.length - 1]) !== -1) {\n            result += maskExpression[maskExpression.length - 1];\n        }\n        var newPosition = position + 1;\n        while (this._shift.has(newPosition)) {\n            shift++;\n            newPosition++;\n        }\n        cb(this._shift.has(position) ? shift : 0, backspaceShift);\n        if (shift < 0) {\n            this._shift.clear();\n        }\n        var res = this.suffix ? \"\" + this.prefix + result + this.suffix : \"\" + this.prefix + result;\n        if (result.length === 0) {\n            res = \"\" + this.prefix + result;\n        }\n        return res;\n    };\n    MaskApplierService.prototype._findSpecialChar = function (inputSymbol) {\n        return this.maskSpecialCharacters.find(function (val) { return val === inputSymbol; });\n    };\n    MaskApplierService.prototype._checkSymbolMask = function (inputSymbol, maskSymbol) {\n        this.maskAvailablePatterns = this.customPattern ? this.customPattern : this.maskAvailablePatterns;\n        return (this.maskAvailablePatterns[maskSymbol] &&\n            this.maskAvailablePatterns[maskSymbol].pattern &&\n            this.maskAvailablePatterns[maskSymbol].pattern.test(inputSymbol));\n    };\n    MaskApplierService.prototype._checkInput = function (str) {\n        return str\n            .split('')\n            .filter(function (i) { return i.match('\\\\d') || i === '.' || i === ','; })\n            .join('');\n    };\n    MaskApplierService = __decorate([\n        Injectable(),\n        __param(0, Inject(config)),\n        __metadata(\"design:paramtypes\", [Object])\n    ], MaskApplierService);\n    return MaskApplierService;\n}());\n\nvar MaskService = /** @class */ (function (_super) {\n    __extends(MaskService, _super);\n    function MaskService(\n    // tslint:disable-next-line\n    document, _config, _elementRef, _renderer) {\n        var _this = _super.call(this, _config) || this;\n        _this.document = document;\n        _this._config = _config;\n        _this._elementRef = _elementRef;\n        _this._renderer = _renderer;\n        _this.validation = true;\n        _this.maskExpression = '';\n        _this.isNumberValue = false;\n        _this.showMaskTyped = false;\n        _this.maskIsShown = '';\n        _this.selStart = null;\n        _this.selEnd = null;\n        // tslint:disable-next-line\n        _this.onChange = function (_) { };\n        _this._formElement = _this._elementRef.nativeElement;\n        return _this;\n    }\n    // tslint:disable-next-line:cyclomatic-complexity\n    MaskService.prototype.applyMask = function (inputValue, maskExpression, position, cb) {\n        if (position === void 0) { position = 0; }\n        if (cb === void 0) { cb = function () { }; }\n        if (!maskExpression) {\n            return inputValue;\n        }\n        this.maskIsShown = this.showMaskTyped ? this.showMaskInInput() : '';\n        if (this.maskExpression === 'IP' && this.showMaskTyped) {\n            this.maskIsShown = this.showMaskInInput(inputValue || '#');\n        }\n        if (!inputValue && this.showMaskTyped) {\n            this.formControlResult(this.prefix);\n            return this.prefix + this.maskIsShown;\n        }\n        var getSymbol = !!inputValue && typeof this.selStart === 'number' ? inputValue[this.selStart] : '';\n        var newInputValue = '';\n        if (this.hiddenInput !== undefined) {\n            var actualResult = this.actualValue.split('');\n            inputValue !== '' && actualResult.length\n                ? typeof this.selStart === 'number' && typeof this.selEnd === 'number'\n                    ? inputValue.length > actualResult.length\n                        ? actualResult.splice(this.selStart, 0, getSymbol)\n                        : inputValue.length < actualResult.length\n                            ? actualResult.length - inputValue.length === 1\n                                ? actualResult.splice(this.selStart - 1, 1)\n                                : actualResult.splice(this.selStart, this.selEnd - this.selStart)\n                            : null\n                    : null\n                : (actualResult = []);\n            newInputValue = this.actualValue.length ? this.shiftTypedSymbols(actualResult.join('')) : inputValue;\n        }\n        newInputValue = Boolean(newInputValue) && newInputValue.length ? newInputValue : inputValue;\n        var result = _super.prototype.applyMask.call(this, newInputValue, maskExpression, position, cb);\n        this.actualValue = this.getActualValue(result);\n        if ((this.maskExpression.startsWith(Separators.SEPARATOR) ||\n            this.maskExpression.startsWith(Separators.DOT_SEPARATOR)) &&\n            this.dropSpecialCharacters === true) {\n            this.maskSpecialCharacters = this.maskSpecialCharacters.filter(function (item) { return item !== ','; });\n        }\n        if (this.maskExpression.startsWith(Separators.COMMA_SEPARATOR) && this.dropSpecialCharacters === true) {\n            this.maskSpecialCharacters = this.maskSpecialCharacters.filter(function (item) { return item !== '.'; });\n        }\n        this.formControlResult(result);\n        if (!this.showMaskTyped) {\n            if (this.hiddenInput) {\n                return result && result.length ? this.hideInput(result, this.maskExpression) : result;\n            }\n            return result;\n        }\n        var resLen = result.length;\n        var prefNmask = this.prefix + this.maskIsShown;\n        return result + (this.maskExpression === 'IP' ? prefNmask : prefNmask.slice(resLen));\n    };\n    MaskService.prototype.applyValueChanges = function (position, cb) {\n        if (position === void 0) { position = 0; }\n        if (cb === void 0) { cb = function () { }; }\n        this._formElement.value = this.applyMask(this._formElement.value, this.maskExpression, position, cb);\n        if (this._formElement === this.document.activeElement) {\n            return;\n        }\n        this.clearIfNotMatchFn();\n    };\n    MaskService.prototype.hideInput = function (inputValue, maskExpression) {\n        var _this = this;\n        return inputValue\n            .split('')\n            .map(function (curr, index) {\n            if (_this.maskAvailablePatterns &&\n                _this.maskAvailablePatterns[maskExpression[index]] &&\n                _this.maskAvailablePatterns[maskExpression[index]].symbol) {\n                return _this.maskAvailablePatterns[maskExpression[index]].symbol;\n            }\n            return curr;\n        })\n            .join('');\n    };\n    // this function is not necessary, it checks result against maskExpression\n    MaskService.prototype.getActualValue = function (res) {\n        var _this = this;\n        var compare = res\n            .split('')\n            .filter(function (symbol, i) {\n            return _this._checkSymbolMask(symbol, _this.maskExpression[i]) ||\n                (_this.maskSpecialCharacters.includes(_this.maskExpression[i]) && symbol === _this.maskExpression[i]);\n        });\n        if (compare.join('') === res) {\n            return compare.join('');\n        }\n        return res;\n    };\n    MaskService.prototype.shiftTypedSymbols = function (inputValue) {\n        var _this = this;\n        var symbolToReplace = '';\n        var newInputValue = (inputValue &&\n            inputValue.split('').map(function (currSymbol, index) {\n                if (_this.maskSpecialCharacters.includes(inputValue[index + 1]) &&\n                    inputValue[index + 1] !== _this.maskExpression[index + 1]) {\n                    symbolToReplace = currSymbol;\n                    return inputValue[index + 1];\n                }\n                if (symbolToReplace.length) {\n                    var replaceSymbol = symbolToReplace;\n                    symbolToReplace = '';\n                    return replaceSymbol;\n                }\n                return currSymbol;\n            })) ||\n            [];\n        return newInputValue.join('');\n    };\n    MaskService.prototype.showMaskInInput = function (inputVal) {\n        if (this.showMaskTyped && !!this.shownMaskExpression) {\n            if (this.maskExpression.length !== this.shownMaskExpression.length) {\n                throw new Error('Mask expression must match mask placeholder length');\n            }\n            else {\n                return this.shownMaskExpression;\n            }\n        }\n        else if (this.showMaskTyped) {\n            if (inputVal) {\n                return this._checkForIp(inputVal);\n            }\n            return this.maskExpression.replace(/\\w/g, '_');\n        }\n        return '';\n    };\n    MaskService.prototype.clearIfNotMatchFn = function () {\n        if (this.clearIfNotMatch &&\n            this.prefix.length + this.maskExpression.length + this.suffix.length !== this._formElement.value.length) {\n            this.formElementProperty = ['value', ''];\n            this.applyMask(this._formElement.value, this.maskExpression);\n        }\n    };\n    Object.defineProperty(MaskService.prototype, \"formElementProperty\", {\n        set: function (_a) {\n            var _b = __read(_a, 2), name = _b[0], value = _b[1];\n            this._renderer.setProperty(this._formElement, name, value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    MaskService.prototype.checkSpecialCharAmount = function (mask) {\n        var _this = this;\n        var chars = mask.split('').filter(function (item) { return _this._findSpecialChar(item); });\n        return chars.length;\n    };\n    // tslint:disable-next-line: cyclomatic-complexity\n    MaskService.prototype._checkForIp = function (inputVal) {\n        if (inputVal === '#') {\n            return '_._._._';\n        }\n        var arr = [];\n        for (var i = 0; i < inputVal.length; i++) {\n            if (inputVal[i].match('\\\\d')) {\n                arr.push(inputVal[i]);\n            }\n        }\n        if (arr.length <= 3) {\n            return '_._._';\n        }\n        if (arr.length > 3 && arr.length <= 6) {\n            return '_._';\n        }\n        if (arr.length > 6 && arr.length <= 9) {\n            return '_';\n        }\n        if (arr.length > 9 && arr.length <= 12) {\n            return '';\n        }\n        return '';\n    };\n    MaskService.prototype.formControlResult = function (inputValue) {\n        if (Array.isArray(this.dropSpecialCharacters)) {\n            this.onChange(this._removeMask(this._removeSuffix(this._removePrefix(inputValue)), this.dropSpecialCharacters));\n        }\n        else if (this.dropSpecialCharacters) {\n            this.onChange(this._checkSymbols(inputValue));\n        }\n        else {\n            this.onChange(this._removeSuffix(this._removePrefix(inputValue)));\n        }\n    };\n    MaskService.prototype._removeMask = function (value, specialCharactersForRemove) {\n        return value ? value.replace(this._regExpForRemove(specialCharactersForRemove), '') : value;\n    };\n    MaskService.prototype._removePrefix = function (value) {\n        if (!this.prefix) {\n            return value;\n        }\n        return value ? value.replace(this.prefix, '') : value;\n    };\n    MaskService.prototype._removeSuffix = function (value) {\n        if (!this.suffix) {\n            return value;\n        }\n        return value ? value.replace(this.suffix, '') : value;\n    };\n    MaskService.prototype._regExpForRemove = function (specialCharactersForRemove) {\n        return new RegExp(specialCharactersForRemove.map(function (item) { return \"\\\\\" + item; }).join('|'), 'gi');\n    };\n    MaskService.prototype._checkSymbols = function (result) {\n        // TODO should simplify this code\n        var separatorValue = this.testFn(Separators.SEPARATOR, this.maskExpression);\n        if (separatorValue && this.isNumberValue) {\n            // tslint:disable-next-line:max-line-length\n            return result === ''\n                ? result\n                : result === ','\n                    ? null\n                    : Number(this._removeMask(this._removeSuffix(this._removePrefix(result)), this.maskSpecialCharacters).replace(',', '.'));\n        }\n        separatorValue = this.testFn(Separators.DOT_SEPARATOR, this.maskExpression);\n        if (separatorValue && this.isNumberValue) {\n            // tslint:disable-next-line:max-line-length\n            return result === ''\n                ? result\n                : result === ','\n                    ? null\n                    : Number(this._removeMask(this._removeSuffix(this._removePrefix(result)), this.maskSpecialCharacters).replace(',', '.'));\n        }\n        separatorValue = this.testFn(Separators.COMMA_SEPARATOR, this.maskExpression);\n        if (separatorValue && this.isNumberValue) {\n            // tslint:disable-next-line:max-line-length\n            return result === ''\n                ? result\n                : result === '.'\n                    ? null\n                    : Number(this._removeMask(this._removeSuffix(this._removePrefix(result)), this.maskSpecialCharacters));\n        }\n        if (this.isNumberValue) {\n            return result === ''\n                ? result\n                : Number(this._removeMask(this._removeSuffix(this._removePrefix(result)), this.maskSpecialCharacters));\n        }\n        else if (this._removeMask(this._removeSuffix(this._removePrefix(result)), this.maskSpecialCharacters).indexOf(',') !== -1) {\n            return this._removeMask(this._removeSuffix(this._removePrefix(result)), this.maskSpecialCharacters).replace(',', '.');\n        }\n        else {\n            return this._removeMask(this._removeSuffix(this._removePrefix(result)), this.maskSpecialCharacters);\n        }\n    };\n    // TODO should think about helpers\n    MaskService.prototype.testFn = function (baseSeparator, maskExpretion) {\n        var matcher = maskExpretion.match(new RegExp(\"^\" + baseSeparator + \"\\\\.([^d]*)\"));\n        return matcher ? Number(matcher[1]) : null;\n    };\n    MaskService = __decorate([\n        Injectable(),\n        __param(0, Inject(DOCUMENT)),\n        __param(1, Inject(config)),\n        __metadata(\"design:paramtypes\", [Object, Object, ElementRef,\n            Renderer2])\n    ], MaskService);\n    return MaskService;\n}(MaskApplierService));\n\nvar MaskDirective = /** @class */ (function () {\n    function MaskDirective(\n    // tslint:disable-next-line\n    document, _maskService) {\n        this.document = document;\n        this._maskService = _maskService;\n        this.maskExpression = '';\n        this.specialCharacters = [];\n        this.patterns = {};\n        this.prefix = '';\n        this.suffix = '';\n        this.dropSpecialCharacters = null;\n        this.hiddenInput = null;\n        this.showMaskTyped = null;\n        this.shownMaskExpression = null;\n        this.showTemplate = null;\n        this.clearIfNotMatch = null;\n        this.validation = null;\n        this._position = null;\n        // tslint:disable-next-line\n        this.onChange = function (_) { };\n        this.onTouch = function () { };\n    }\n    MaskDirective_1 = MaskDirective;\n    MaskDirective.prototype.ngOnChanges = function (changes) {\n        // tslint:disable-next-line:max-line-length\n        var maskExpression = changes.maskExpression, specialCharacters = changes.specialCharacters, patterns = changes.patterns, prefix = changes.prefix, suffix = changes.suffix, dropSpecialCharacters = changes.dropSpecialCharacters, hiddenInput = changes.hiddenInput, showMaskTyped = changes.showMaskTyped, shownMaskExpression = changes.shownMaskExpression, showTemplate = changes.showTemplate, clearIfNotMatch = changes.clearIfNotMatch, validation = changes.validation;\n        if (maskExpression) {\n            this._maskValue = changes.maskExpression.currentValue || '';\n        }\n        if (specialCharacters) {\n            if (!specialCharacters.currentValue ||\n                !Array.isArray(specialCharacters.currentValue) ||\n                (Array.isArray(specialCharacters.currentValue) && !specialCharacters.currentValue.length)) {\n                return;\n            }\n            this._maskService.maskSpecialCharacters = changes.specialCharacters.currentValue || '';\n        }\n        if (patterns) {\n            this._maskService.maskAvailablePatterns = patterns.currentValue;\n        }\n        if (prefix) {\n            this._maskService.prefix = prefix.currentValue;\n        }\n        if (suffix) {\n            this._maskService.suffix = suffix.currentValue;\n        }\n        if (dropSpecialCharacters) {\n            this._maskService.dropSpecialCharacters = dropSpecialCharacters.currentValue;\n        }\n        if (hiddenInput) {\n            this._maskService.hiddenInput = hiddenInput.currentValue;\n        }\n        if (showMaskTyped) {\n            this._maskService.showMaskTyped = showMaskTyped.currentValue;\n        }\n        if (shownMaskExpression) {\n            this._maskService.shownMaskExpression = shownMaskExpression.currentValue;\n        }\n        if (showTemplate) {\n            this._maskService.showTemplate = showTemplate.currentValue;\n        }\n        if (clearIfNotMatch) {\n            this._maskService.clearIfNotMatch = clearIfNotMatch.currentValue;\n        }\n        if (validation) {\n            this._maskService.validation = validation.currentValue;\n        }\n        this._applyMask();\n    };\n    // tslint:disable-next-line: cyclomatic-complexity\n    MaskDirective.prototype.validate = function (_a) {\n        var value = _a.value;\n        if (!this._maskService.validation) {\n            return null;\n        }\n        if (this._maskService.ipError) {\n            return { 'Mask error': true };\n        }\n        if (this._maskValue.startsWith('dot_separator') || this._maskValue.startsWith('comma_separator')) {\n            return null;\n        }\n        if (withoutValidation.includes(this._maskValue)) {\n            return null;\n        }\n        if (this._maskService.clearIfNotMatch) {\n            return null;\n        }\n        if (value && value.toString().length >= 1) {\n            var counterOfOpt = 0;\n            var _loop_1 = function (key) {\n                if (this_1._maskService.maskAvailablePatterns[key].optional &&\n                    this_1._maskService.maskAvailablePatterns[key].optional === true) {\n                    if (this_1._maskValue.indexOf(key) !== this_1._maskValue.lastIndexOf(key)) {\n                        var opt = this_1._maskValue\n                            .split('')\n                            .filter(function (i) { return i === key; })\n                            .join('');\n                        counterOfOpt += opt.length;\n                    }\n                    else if (this_1._maskValue.indexOf(key) !== -1) {\n                        counterOfOpt++;\n                    }\n                    if (this_1._maskValue.indexOf(key) !== -1 &&\n                        value.toString().length >= this_1._maskValue.indexOf(key)) {\n                        return { value: null };\n                    }\n                    if (counterOfOpt === this_1._maskValue.length) {\n                        return { value: null };\n                    }\n                }\n            };\n            var this_1 = this;\n            for (var key in this._maskService.maskAvailablePatterns) {\n                var state_1 = _loop_1(key);\n                if (typeof state_1 === \"object\")\n                    return state_1.value;\n            }\n            if (this._maskValue.indexOf('*') === 1 ||\n                this._maskValue.indexOf('?') === 1 ||\n                this._maskValue.indexOf('{') === 1) {\n                return null;\n            }\n            else if ((this._maskValue.indexOf('*') > 1 && value.toString().length < this._maskValue.indexOf('*')) ||\n                (this._maskValue.indexOf('?') > 1 && value.toString().length < this._maskValue.indexOf('?'))) {\n                return { 'Mask error': true };\n            }\n            if (this._maskValue.indexOf('*') === -1 || this._maskValue.indexOf('?') === -1) {\n                var length_1 = this._maskService.dropSpecialCharacters\n                    ? this._maskValue.length - this._maskService.checkSpecialCharAmount(this._maskValue) - counterOfOpt\n                    : this._maskValue.length - counterOfOpt;\n                if (value.toString().length < length_1) {\n                    return { 'Mask error': true };\n                }\n            }\n        }\n        return null;\n    };\n    MaskDirective.prototype.onInput = function (e) {\n        var el = e.target;\n        this._inputValue = el.value;\n        if (!this._maskValue) {\n            this.onChange(el.value);\n            return;\n        }\n        var position = el.selectionStart === 1\n            ? el.selectionStart + this._maskService.prefix.length\n            : el.selectionStart;\n        var caretShift = 0;\n        var backspaceShift = false;\n        this._maskService.applyValueChanges(position, function (shift, _backspaceShift) {\n            caretShift = shift;\n            backspaceShift = _backspaceShift;\n        });\n        // only set the selection if the element is active\n        if (this.document.activeElement !== el) {\n            return;\n        }\n        this._position = this._position === 1 && this._inputValue.length === 1 ? null : this._position;\n        el.selectionStart = el.selectionEnd =\n            this._position !== null\n                ? this._position\n                : position +\n                    // tslint:disable-next-line\n                    (this._code === 'Backspace' && !backspaceShift ? 0 : caretShift);\n        this._position = null;\n    };\n    MaskDirective.prototype.onBlur = function () {\n        this._maskService.clearIfNotMatchFn();\n        this.onTouch();\n    };\n    MaskDirective.prototype.onFocus = function (e) {\n        var el = e.target;\n        var posStart = 0;\n        var posEnd = 0;\n        if (el !== null &&\n            el.selectionStart !== null &&\n            el.selectionStart === el.selectionEnd &&\n            el.selectionStart > this._maskService.prefix.length &&\n            // tslint:disable-next-line\n            e.keyCode !== 38)\n            if (this._maskService.showMaskTyped) {\n                // ) {\n                //     return;\n                // }\n                this._maskService.maskIsShown = this._maskService.showMaskInInput();\n                if (el.setSelectionRange && this._maskService.prefix + this._maskService.maskIsShown === el.value) {\n                    el.focus();\n                    el.setSelectionRange(posStart, posEnd);\n                }\n                else if (el.setSelectionRange && this._maskService.maskIsShown !== el.value) {\n                    el.focus();\n                    el.setSelectionRange(posStart, posEnd);\n                }\n                if (this._inputValue.match('[wа-яА-Я]') || this._inputValue.match('[a-z]|[A-Z]')) ;\n            }\n        el.value =\n            !el.value || el.value === this._maskService.prefix\n                ? this._maskService.prefix + this._maskService.maskIsShown\n                : el.value;\n        /** fix of cursor position with prefix when mouse click occur */\n        if ((el.selectionStart || el.selectionEnd) <= this._maskService.prefix.length) {\n            el.selectionStart = this._maskService.prefix.length;\n            return;\n        }\n    };\n    MaskDirective.prototype.a = function (e) {\n        this._code = e.code ? e.code : e.key;\n        var el = e.target;\n        this._maskService.selStart = el.selectionStart;\n        this._maskService.selEnd = el.selectionEnd;\n        if (e.keyCode === 38) {\n            e.preventDefault();\n        }\n        if (e.keyCode === 37 || e.keyCode === 8) {\n            if (e.keyCode === 37) {\n                el.selectionStart = el.selectionEnd - 1;\n            }\n            if (e.keyCode === 8 && el.value.length === 0) {\n                el.selectionStart = el.selectionEnd;\n            }\n            if (el.selectionStart <= this._maskService.prefix.length &&\n                el.selectionEnd <= this._maskService.prefix.length) {\n                e.preventDefault();\n            }\n            var cursorStart = el.selectionStart;\n            // this.onFocus(e);\n            if (e.keyCode === 8 && cursorStart === 0 && el.selectionEnd === el.value.length && el.value.length !== 0) {\n                this._position = this._maskService.prefix ? this._maskService.prefix.length : 0;\n                this._maskService.applyMask(this._maskService.prefix, this._maskService.maskExpression, this._position);\n            }\n        }\n    };\n    MaskDirective.prototype.onPaste = function () {\n        this._position = Number.MAX_SAFE_INTEGER;\n    };\n    /** It writes the value in the input */\n    MaskDirective.prototype.writeValue = function (inputValue) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                if (inputValue === undefined) {\n                    inputValue = '';\n                }\n                if (typeof inputValue === 'number') {\n                    inputValue = String(inputValue);\n                    inputValue = this._maskValue.startsWith('dot_separator') ? inputValue.replace('.', ',') : inputValue;\n                    this._maskService.isNumberValue = true;\n                }\n                (inputValue && this._maskService.maskExpression) ||\n                    (this._maskService.maskExpression && (this._maskService.prefix || this._maskService.showMaskTyped))\n                    ? (this._maskService.formElementProperty = [\n                        'value',\n                        this._maskService.applyMask(inputValue, this._maskService.maskExpression),\n                    ])\n                    : (this._maskService.formElementProperty = ['value', inputValue]);\n                this._inputValue = inputValue;\n                return [2 /*return*/];\n            });\n        });\n    };\n    // tslint:disable-next-line\n    MaskDirective.prototype.registerOnChange = function (fn) {\n        this.onChange = fn;\n        this._maskService.onChange = this.onChange;\n    };\n    // tslint:disable-next-line\n    MaskDirective.prototype.registerOnTouched = function (fn) {\n        this.onTouch = fn;\n    };\n    /** It disables the input element */\n    MaskDirective.prototype.setDisabledState = function (isDisabled) {\n        this._maskService.formElementProperty = ['disabled', isDisabled];\n    };\n    MaskDirective.prototype._repeatPatternSymbols = function (maskExp) {\n        var _this = this;\n        return ((maskExp.match(/{[0-9]+}/) &&\n            maskExp.split('').reduce(function (accum, currval, index) {\n                _this._start = currval === '{' ? index : _this._start;\n                if (currval !== '}') {\n                    return _this._maskService._findSpecialChar(currval) ? accum + currval : accum;\n                }\n                _this._end = index;\n                var repeatNumber = Number(maskExp.slice(_this._start + 1, _this._end));\n                var repaceWith = new Array(repeatNumber + 1).join(maskExp[_this._start - 1]);\n                return accum + repaceWith;\n            }, '')) ||\n            maskExp);\n    };\n    // tslint:disable-next-line:no-any\n    MaskDirective.prototype._applyMask = function () {\n        this._maskService.maskExpression = this._repeatPatternSymbols(this._maskValue || '');\n        this._maskService.formElementProperty = [\n            'value',\n            this._maskService.applyMask(this._inputValue, this._maskService.maskExpression),\n        ];\n    };\n    var MaskDirective_1;\n    __decorate([\n        Input('mask'),\n        __metadata(\"design:type\", String)\n    ], MaskDirective.prototype, \"maskExpression\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], MaskDirective.prototype, \"specialCharacters\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], MaskDirective.prototype, \"patterns\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], MaskDirective.prototype, \"prefix\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], MaskDirective.prototype, \"suffix\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], MaskDirective.prototype, \"dropSpecialCharacters\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], MaskDirective.prototype, \"hiddenInput\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], MaskDirective.prototype, \"showMaskTyped\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], MaskDirective.prototype, \"shownMaskExpression\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], MaskDirective.prototype, \"showTemplate\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], MaskDirective.prototype, \"clearIfNotMatch\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], MaskDirective.prototype, \"validation\", void 0);\n    __decorate([\n        HostListener('input', ['$event']),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", void 0)\n    ], MaskDirective.prototype, \"onInput\", null);\n    __decorate([\n        HostListener('blur'),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], MaskDirective.prototype, \"onBlur\", null);\n    __decorate([\n        HostListener('click', ['$event']),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", void 0)\n    ], MaskDirective.prototype, \"onFocus\", null);\n    __decorate([\n        HostListener('keydown', ['$event']),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", void 0)\n    ], MaskDirective.prototype, \"a\", null);\n    __decorate([\n        HostListener('paste'),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], MaskDirective.prototype, \"onPaste\", null);\n    MaskDirective = MaskDirective_1 = __decorate([\n        Directive({\n            selector: '[mask]',\n            providers: [\n                {\n                    provide: NG_VALUE_ACCESSOR,\n                    useExisting: forwardRef(function () { return MaskDirective_1; }),\n                    multi: true,\n                },\n                {\n                    provide: NG_VALIDATORS,\n                    useExisting: forwardRef(function () { return MaskDirective_1; }),\n                    multi: true,\n                },\n                MaskService,\n            ],\n        }),\n        __param(0, Inject(DOCUMENT)),\n        __metadata(\"design:paramtypes\", [Object, MaskService])\n    ], MaskDirective);\n    return MaskDirective;\n}());\n\nvar MaskPipe = /** @class */ (function () {\n    function MaskPipe(_maskService) {\n        this._maskService = _maskService;\n    }\n    MaskPipe.prototype.transform = function (value, mask) {\n        if (!value && typeof value !== 'number') {\n            return '';\n        }\n        if (typeof mask === 'string') {\n            return this._maskService.applyMask(\"\" + value, mask);\n        }\n        return this._maskService.applyMaskWithPattern(\"\" + value, mask);\n    };\n    MaskPipe = __decorate([\n        Pipe({\n            name: 'mask',\n            pure: true,\n        }),\n        __metadata(\"design:paramtypes\", [MaskApplierService])\n    ], MaskPipe);\n    return MaskPipe;\n}());\n\nvar NgxMaskModule = /** @class */ (function () {\n    function NgxMaskModule() {\n    }\n    NgxMaskModule_1 = NgxMaskModule;\n    NgxMaskModule.forRoot = function (configValue) {\n        return {\n            ngModule: NgxMaskModule_1,\n            providers: [\n                {\n                    provide: NEW_CONFIG,\n                    useValue: configValue,\n                },\n                {\n                    provide: INITIAL_CONFIG,\n                    useValue: initialConfig,\n                },\n                {\n                    provide: config,\n                    useFactory: _configFactory,\n                    deps: [INITIAL_CONFIG, NEW_CONFIG],\n                },\n                MaskApplierService,\n            ],\n        };\n    };\n    NgxMaskModule.forChild = function (_configValue) {\n        return {\n            ngModule: NgxMaskModule_1,\n        };\n    };\n    var NgxMaskModule_1;\n    NgxMaskModule = NgxMaskModule_1 = __decorate([\n        NgModule({\n            exports: [MaskDirective, MaskPipe],\n            declarations: [MaskDirective, MaskPipe],\n        })\n    ], NgxMaskModule);\n    return NgxMaskModule;\n}());\n/**\n * @internal\n */\nfunction _configFactory(initConfig, configValue) {\n    return configValue instanceof Function ? __assign({}, initConfig, configValue()) : __assign({}, initConfig, configValue);\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { INITIAL_CONFIG, MaskDirective, MaskPipe, MaskService, NEW_CONFIG, NgxMaskModule, _configFactory, config, initialConfig, withoutValidation, MaskApplierService as ɵa };\n"]}