{"version":3,"sources":["C:/temp/ControleMedico/AppControleMedico/node_modules/ng2-smart-table/components/pager/pager.component.js"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwGM","file":"pager.component.js","sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { DataSource } from '../../lib/data-source/data-source';\nvar PagerComponent = (function () {\n    function PagerComponent() {\n        this.perPageSelect = [];\n        this.changePage = new EventEmitter();\n        this.count = 0;\n    }\n    PagerComponent.prototype.ngOnChanges = function (changes) {\n        var _this = this;\n        if (changes.source) {\n            if (!changes.source.firstChange) {\n                this.dataChangedSub.unsubscribe();\n            }\n            this.dataChangedSub = this.source.onChanged().subscribe(function (dataChanges) {\n                _this.page = _this.source.getPaging().page;\n                _this.perPage = _this.source.getPaging().perPage;\n                _this.currentPerPage = _this.perPage;\n                _this.count = _this.source.count();\n                if (_this.isPageOutOfBounce()) {\n                    _this.source.setPage(--_this.page);\n                }\n                _this.processPageChange(dataChanges);\n                _this.initPages();\n            });\n        }\n    };\n    /**\n     * We change the page here depending on the action performed against data source\n     * if a new element was added to the end of the table - then change the page to the last\n     * if a new element was added to the beginning of the table - then to the first page\n     * @param changes\n     */\n    PagerComponent.prototype.processPageChange = function (changes) {\n        if (changes['action'] === 'prepend') {\n            this.source.setPage(1);\n        }\n        if (changes['action'] === 'append') {\n            this.source.setPage(this.getLast());\n        }\n    };\n    PagerComponent.prototype.shouldShow = function () {\n        return this.source.count() > this.perPage;\n    };\n    PagerComponent.prototype.paginate = function (page) {\n        this.source.setPage(page);\n        this.page = page;\n        this.changePage.emit({ page: page });\n        return false;\n    };\n    PagerComponent.prototype.next = function () {\n        return this.paginate(this.getPage() + 1);\n    };\n    PagerComponent.prototype.prev = function () {\n        return this.paginate(this.getPage() - 1);\n    };\n    PagerComponent.prototype.getPage = function () {\n        return this.page;\n    };\n    PagerComponent.prototype.getPages = function () {\n        return this.pages;\n    };\n    PagerComponent.prototype.getLast = function () {\n        return Math.ceil(this.count / this.perPage);\n    };\n    PagerComponent.prototype.isPageOutOfBounce = function () {\n        return (this.page * this.perPage) >= (this.count + this.perPage) && this.page > 1;\n    };\n    PagerComponent.prototype.initPages = function () {\n        var pagesCount = this.getLast();\n        var showPagesCount = 4;\n        showPagesCount = pagesCount < showPagesCount ? pagesCount : showPagesCount;\n        this.pages = [];\n        if (this.shouldShow()) {\n            var middleOne = Math.ceil(showPagesCount / 2);\n            middleOne = this.page >= middleOne ? this.page : middleOne;\n            var lastOne = middleOne + Math.floor(showPagesCount / 2);\n            lastOne = lastOne >= pagesCount ? pagesCount : lastOne;\n            var firstOne = lastOne - showPagesCount + 1;\n            for (var i = firstOne; i <= lastOne; i++) {\n                this.pages.push(i);\n            }\n        }\n    };\n    PagerComponent.prototype.onChangePerPage = function (event) {\n        if (this.currentPerPage) {\n            if (typeof this.currentPerPage === 'string' && this.currentPerPage.toLowerCase() === 'all') {\n                this.source.getPaging().perPage = null;\n            }\n            else {\n                this.source.getPaging().perPage = this.currentPerPage * 1;\n                this.source.refresh();\n            }\n            this.initPages();\n        }\n    };\n    return PagerComponent;\n}());\n__decorate([\n    Input(),\n    __metadata(\"design:type\", DataSource)\n], PagerComponent.prototype, \"source\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Array)\n], PagerComponent.prototype, \"perPageSelect\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], PagerComponent.prototype, \"changePage\", void 0);\nPagerComponent = __decorate([\n    Component({\n        selector: 'ng2-smart-table-pager',\n        styles: [\".ng2-smart-pagination{display:inline-flex;font-size:.875em;padding:0}.ng2-smart-pagination .sr-only{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0,0,0,0);border:0}.ng2-smart-pagination .ng2-smart-page-item{display:inline}.ng2-smart-pagination .page-link-next,.ng2-smart-pagination .page-link-prev{font-size:10px}:host{display:flex;justify-content:space-between}:host select{margin:1rem 0 1rem 1rem}:host label{margin:1rem 0 1rem 1rem;line-height:2.5rem} /*# sourceMappingURL=pager.component.css.map */ \"],\n        template: \"\\n    <nav *ngIf=\\\"shouldShow()\\\" class=\\\"ng2-smart-pagination-nav\\\">\\n      <ul class=\\\"ng2-smart-pagination pagination\\\">\\n        <li class=\\\"ng2-smart-page-item page-item\\\" [ngClass]=\\\"{disabled: getPage() == 1}\\\">\\n          <a class=\\\"ng2-smart-page-link page-link\\\" href=\\\"#\\\"\\n          (click)=\\\"getPage() == 1 ? false : paginate(1)\\\" aria-label=\\\"First\\\">\\n            <span aria-hidden=\\\"true\\\">&laquo;</span>\\n            <span class=\\\"sr-only\\\">First</span>\\n          </a>\\n        </li>\\n        <li class=\\\"ng2-smart-page-item page-item\\\" [ngClass]=\\\"{disabled: getPage() == 1}\\\">\\n          <a class=\\\"ng2-smart-page-link page-link page-link-prev\\\" href=\\\"#\\\"\\n             (click)=\\\"getPage() == 1 ? false : prev()\\\" aria-label=\\\"Prev\\\">\\n            <span aria-hidden=\\\"true\\\">&lt;</span>\\n            <span class=\\\"sr-only\\\">Prev</span>\\n          </a>\\n        </li>\\n        <li class=\\\"ng2-smart-page-item page-item\\\"\\n        [ngClass]=\\\"{active: getPage() == page}\\\" *ngFor=\\\"let page of getPages()\\\">\\n          <span class=\\\"ng2-smart-page-link page-link\\\"\\n          *ngIf=\\\"getPage() == page\\\">{{ page }} <span class=\\\"sr-only\\\">(current)</span></span>\\n          <a class=\\\"ng2-smart-page-link page-link\\\" href=\\\"#\\\"\\n          (click)=\\\"paginate(page)\\\" *ngIf=\\\"getPage() != page\\\">{{ page }}</a>\\n        </li>\\n\\n        <li class=\\\"ng2-smart-page-item page-item\\\"\\n            [ngClass]=\\\"{disabled: getPage() == getLast()}\\\">\\n          <a class=\\\"ng2-smart-page-link page-link page-link-next\\\" href=\\\"#\\\"\\n             (click)=\\\"getPage() == getLast() ? false : next()\\\" aria-label=\\\"Next\\\">\\n            <span aria-hidden=\\\"true\\\">&gt;</span>\\n            <span class=\\\"sr-only\\\">Next</span>\\n          </a>\\n        </li>\\n        \\n        <li class=\\\"ng2-smart-page-item page-item\\\"\\n        [ngClass]=\\\"{disabled: getPage() == getLast()}\\\">\\n          <a class=\\\"ng2-smart-page-link page-link\\\" href=\\\"#\\\"\\n          (click)=\\\"getPage() == getLast() ? false : paginate(getLast())\\\" aria-label=\\\"Last\\\">\\n            <span aria-hidden=\\\"true\\\">&raquo;</span>\\n            <span class=\\\"sr-only\\\">Last</span>\\n          </a>\\n        </li>\\n      </ul>\\n    </nav>\\n    \\n    <nav *ngIf=\\\"perPageSelect && perPageSelect.length > 0\\\" class=\\\"ng2-smart-pagination-per-page\\\">\\n      <label for=\\\"per-page\\\">\\n        Per Page:\\n      </label>\\n      <select (change)=\\\"onChangePerPage($event)\\\" [(ngModel)]=\\\"currentPerPage\\\" id=\\\"per-page\\\">\\n        <option *ngFor=\\\"let item of perPageSelect\\\" [value]=\\\"item\\\">{{ item }}</option>\\n      </select>\\n    </nav>\\n  \",\n    })\n], PagerComponent);\nexport { PagerComponent };\n"]}