{"version":3,"file":"webcam.component.d.ts","sources":["C:/temp/ControleMedico/AppControleMedico/node_modules/ngx-webcam/src/app/modules/webcam/webcam/webcam.component.d.ts"],"sourcesContent":["import { AfterViewInit, EventEmitter, OnDestroy } from '@angular/core';\r\nimport { WebcamInitError } from '../domain/webcam-init-error';\r\nimport { WebcamImage } from '../domain/webcam-image';\r\nimport { Observable } from 'rxjs';\r\nimport { WebcamMirrorProperties } from '../domain/webcam-mirror-properties';\r\nexport declare class WebcamComponent implements AfterViewInit, OnDestroy {\r\n    private static DEFAULT_VIDEO_OPTIONS;\r\n    private static DEFAULT_IMAGE_TYPE;\r\n    private static DEFAULT_IMAGE_QUALITY;\r\n    /** Defines the max width of the webcam area in px */\r\n    width: number;\r\n    /** Defines the max height of the webcam area in px */\r\n    height: number;\r\n    /** Defines base constraints to apply when requesting video track from UserMedia */\r\n    videoOptions: MediaTrackConstraints;\r\n    /** Flag to enable/disable camera switch. If enabled, a switch icon will be displayed if multiple cameras were found */\r\n    allowCameraSwitch: boolean;\r\n    /** Parameter to control image mirroring (i.e. for user-facing camera). [\"auto\", \"always\", \"never\"] */\r\n    mirrorImage: string | WebcamMirrorProperties;\r\n    /** Flag to control whether an ImageData object is stored into the WebcamImage object. */\r\n    captureImageData: boolean;\r\n    /** The image type to use when capturing snapshots */\r\n    imageType: string;\r\n    /** The image quality to use when capturing snapshots (number between 0 and 1) */\r\n    imageQuality: number;\r\n    /** EventEmitter which fires when an image has been captured */\r\n    imageCapture: EventEmitter<WebcamImage>;\r\n    /** Emits a mediaError if webcam cannot be initialized (e.g. missing user permissions) */\r\n    initError: EventEmitter<WebcamInitError>;\r\n    /** Emits when the webcam video was clicked */\r\n    imageClick: EventEmitter<void>;\r\n    /** Emits the active deviceId after the active video device was switched */\r\n    cameraSwitched: EventEmitter<string>;\r\n    /** available video devices */\r\n    availableVideoInputs: MediaDeviceInfo[];\r\n    /** Indicates whether the video device is ready to be switched */\r\n    videoInitialized: boolean;\r\n    /** If the Observable represented by this subscription emits, an image will be captured and emitted through\r\n     * the 'imageCapture' EventEmitter */\r\n    private triggerSubscription;\r\n    /** Index of active video in availableVideoInputs */\r\n    private activeVideoInputIndex;\r\n    /** Subscription to switchCamera events */\r\n    private switchCameraSubscription;\r\n    /** MediaStream object in use for streaming UserMedia data */\r\n    private mediaStream;\r\n    private video;\r\n    /** Canvas for Video Snapshots */\r\n    private canvas;\r\n    /** width and height of the active video stream */\r\n    private activeVideoSettings;\r\n    /**\r\n     * If the given Observable emits, an image will be captured and emitted through 'imageCapture' EventEmitter\r\n     */\r\n    trigger: Observable<void>;\r\n    /**\r\n     * If the given Observable emits, the active webcam will be switched to the one indicated by the emitted value.\r\n     * @param switchCamera Indicates which webcam to switch to\r\n     *   true: cycle forwards through available webcams\r\n     *   false: cycle backwards through available webcams\r\n     *   string: activate the webcam with the given id\r\n     */\r\n    switchCamera: Observable<boolean | string>;\r\n    /**\r\n     * Get MediaTrackConstraints to request streaming the given device\r\n     * @param deviceId\r\n     * @param baseMediaTrackConstraints base constraints to merge deviceId-constraint into\r\n     * @returns\r\n     */\r\n    private static getMediaConstraintsForDevice;\r\n    /**\r\n     * Tries to harvest the deviceId from the given mediaStreamTrack object.\r\n     * Browsers populate this object differently; this method tries some different approaches\r\n     * to read the id.\r\n     * @param mediaStreamTrack\r\n     * @returns deviceId if found in the mediaStreamTrack\r\n     */\r\n    private static getDeviceIdFromMediaStreamTrack;\r\n    /**\r\n     * Tries to harvest the facingMode from the given mediaStreamTrack object.\r\n     * Browsers populate this object differently; this method tries some different approaches\r\n     * to read the value.\r\n     * @param mediaStreamTrack\r\n     * @returns facingMode if found in the mediaStreamTrack\r\n     */\r\n    private static getFacingModeFromMediaStreamTrack;\r\n    /**\r\n     * Determines whether the given mediaStreamTrack claims itself as user facing\r\n     * @param mediaStreamTrack\r\n     */\r\n    private static isUserFacing;\r\n    /**\r\n     * Extracts the value from the given ConstrainDOMString\r\n     * @param constrainDOMString\r\n     */\r\n    private static getValueFromConstrainDOMString;\r\n    ngAfterViewInit(): void;\r\n    ngOnDestroy(): void;\r\n    /**\r\n     * Takes a snapshot of the current webcam's view and emits the image as an event\r\n     */\r\n    takeSnapshot(): void;\r\n    /**\r\n     * Switches to the next/previous video device\r\n     * @param forward\r\n     */\r\n    rotateVideoInput(forward: boolean): void;\r\n    /**\r\n     * Switches the camera-view to the specified video device\r\n     */\r\n    switchToVideoInput(deviceId: string): void;\r\n    /**\r\n     * Event-handler for video resize event.\r\n     * Triggers Angular change detection so that new video dimensions get applied\r\n     */\r\n    videoResize(): void;\r\n    readonly videoWidth: number;\r\n    readonly videoHeight: number;\r\n    readonly videoStyleClasses: string;\r\n    readonly nativeVideoElement: any;\r\n    /**\r\n     * Returns the video aspect ratio of the active video stream\r\n     */\r\n    private getVideoAspectRatio;\r\n    /**\r\n     * Init webcam live view\r\n     */\r\n    private initWebcam;\r\n    private getActiveVideoTrack;\r\n    private isMirrorImage;\r\n    /**\r\n     * Stops all active media tracks.\r\n     * This prevents the webcam from being indicated as active,\r\n     * even if it is no longer used by this component.\r\n     */\r\n    private stopMediaTracks;\r\n    /**\r\n     * Unsubscribe from all open subscriptions\r\n     */\r\n    private unsubscribeFromSubscriptions;\r\n    /**\r\n     * Reads available input devices\r\n     */\r\n    private detectAvailableDevices;\r\n}\r\n"],"names":[],"mappings":"AAAA;;;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2IA;"}